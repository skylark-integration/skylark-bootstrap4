{"version":3,"sources":["skylark-bootstrap4.js"],"names":[],"mappingsfile":"../skylark-bootstrap4.js","sourcesContent":["define('skylark-bootstrap4/bs4',[\n  \"skylark-utils-dom/skylark\",\n],function(skylark){\n\tvar ui = skylark.ui = skylark.ui || {}, \n\t\tbs4 = ui.bs4 = {};\n\n\treturn bs4;\n});\n\ndefine('skylark-bootstrap4/util',[\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/eventer'\n], function ($, eventer) {\n    'use strict';\n\n    const TRANSITION_END = 'transitionend';\n    const MAX_UID = 1000000;\n    const MILLISECONDS_MULTIPLIER = 1000;\n\n    function toType(obj) {\n        return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n    }\n\n    /*\n    function getSpecialTransitionEndEvent() {\n        return {\n            bindType: TRANSITION_END,\n            delegateType: TRANSITION_END,\n            handle(event) {\n                if ($(event.target).is(this)) {\n                    return event.handleObj.handler.apply(this, arguments);\n                }\n                return undefined;\n            }\n        };\n    }\n\n    function transitionEndEmulator(duration) {\n        let called = false;\n        $(this).one(Util.TRANSITION_END, () => {\n            called = true;\n        });\n        setTimeout(() => {\n            if (!called) {\n                Util.triggerTransitionEnd(this);\n            }\n        }, duration);\n        return this;\n    }\n\n    function setTransitionEndSupport() {\n        $.fn.emulateTransitionEnd = transitionEndEmulator;\n        eventer.create.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();\n    }\n    */\n    const Util = {\n        TRANSITION_END: 'bsTransitionEnd',\n\n        getUID(prefix) {\n            do {\n                prefix += ~~(Math.random() * MAX_UID);\n            } while (document.getElementById(prefix));\n            return prefix;\n        },\n\n        getSelectorFromElement(element) {\n            let selector = element.getAttribute('data-target');\n            if (!selector || selector === '#') {\n                const hrefAttr = element.getAttribute('href');\n                selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';\n            }\n            return selector && document.querySelector(selector) ? selector : null;\n        },\n\n        getTransitionDurationFromElement(element) {\n            if (!element) {\n                return 0;\n            }\n            let transitionDuration = $(element).css('transition-duration');\n            let transitionDelay = $(element).css('transition-delay');\n            const floatTransitionDuration = parseFloat(transitionDuration);\n            const floatTransitionDelay = parseFloat(transitionDelay);\n            if (!floatTransitionDuration && !floatTransitionDelay) {\n                return 0;\n            }\n            transitionDuration = transitionDuration.split(',')[0];\n            transitionDelay = transitionDelay.split(',')[0];\n            return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n        },\n\n        reflow(element) {\n            return element.offsetHeight;\n        },\n\n        triggerTransitionEnd(element) {\n            $(element).trigger(TRANSITION_END);\n        },\n\n        supportsTransitionEnd() {\n            return Boolean(TRANSITION_END);\n        },\n\n        isElement(obj) {\n            return (obj[0] || obj).nodeType;\n        },\n\n        typeCheckConfig(componentName, config, configTypes) {\n            for (const property in configTypes) {\n                if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n                    const expectedTypes = configTypes[property];\n                    const value = config[property];\n                    const valueType = value && Util.isElement(value) ? 'element' : toType(value);\n                    if (!new RegExp(expectedTypes).test(valueType)) {\n                        throw new Error(`${ componentName.toUpperCase() }: ` + `Option \"${ property }\" provided type \"${ valueType }\" ` + `but expected type \"${ expectedTypes }\".`);\n                    }\n                }\n            }\n        },\n\n        findShadowRoot(element) {\n            if (!document.documentElement.attachShadow) {\n                return null;\n            }\n            if (typeof element.getRootNode === 'function') {\n                const root = element.getRootNode();\n                return root instanceof ShadowRoot ? root : null;\n            }\n            if (element instanceof ShadowRoot) {\n                return element;\n            }\n            if (!element.parentNode) {\n                return null;\n            }\n            return Util.findShadowRoot(element.parentNode);\n        }\n    };\n\n    //setTransitionEndSupport();\n    eventer.special.bsTransitionEnd = eventer.special.transitionEnd;\n\n    return Util;\n});\ndefine('skylark-bootstrap4/alert',[\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/eventer',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './util'\n], function ($, eventer, plugins,bs4,Util) {\n\n    'use strict';\n    const NAME = 'alert';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.alert';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const Selector = { DISMISS: '[data-dismiss=\"alert\"]' };\n    const Event = {\n        CLOSE: `close${ EVENT_KEY }`,\n        CLOSED: `closed${ EVENT_KEY }`,\n        CLICK_DATA_API: `click${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    const ClassName = {\n        ALERT: 'alert',\n        FADE: 'fade',\n        SHOW: 'show'\n    };\n    class Alert {\n        constructor(element) {\n            this._element = element;\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        close(element) {\n            let rootElement = this._element;\n            if (element) {\n                rootElement = this._getRootElement(element);\n            }\n            const customEvent = this._triggerCloseEvent(rootElement);\n            if (customEvent.isDefaultPrevented()) {\n                return;\n            }\n            this._removeElement(rootElement);\n        }\n        dispose() {\n            $.removeData(this._element, DATA_KEY);\n            this._element = null;\n        }\n        _getRootElement(element) {\n            const selector = Util.getSelectorFromElement(element);\n            let parent = false;\n            if (selector) {\n                parent = document.querySelector(selector);\n            }\n            if (!parent) {\n                parent = $(element).closest(`.${ ClassName.ALERT }`)[0];\n            }\n            return parent;\n        }\n        _triggerCloseEvent(element) {\n            const closeEvent = eventer.create(Event.CLOSE);\n            $(element).trigger(closeEvent);\n            return closeEvent;\n        }\n        _removeElement(element) {\n            $(element).removeClass(ClassName.SHOW);\n            if (!$(element).hasClass(ClassName.FADE)) {\n                this._destroyElement(element);\n                return;\n            }\n            const transitionDuration = Util.getTransitionDurationFromElement(element);\n            $(element).one(Util.TRANSITION_END, event => this._destroyElement(element, event)).emulateTransitionEnd(transitionDuration);\n        }\n        _destroyElement(element) {\n            $(element).detach().trigger(Event.CLOSED).remove();\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                const $element = $(this);\n                let data = $element.data(DATA_KEY);\n                if (!data) {\n                    data = new Alert(this);\n                    $element.data(DATA_KEY, data);\n                }\n                if (config === 'close') {\n                    data[config](this);\n                }\n            });\n        }\n        static _handleDismiss(alertInstance) {\n            return function (event) {\n                if (event) {\n                    event.preventDefault();\n                }\n                alertInstance.close(this);\n            };\n        }\n    }\n\n    $(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));\n    $.fn[NAME] = Alert._jqueryInterface;\n    $.fn[NAME].Constructor = Alert;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Alert._jqueryInterface;\n    };\n\n    return bs4.Alert = Alert;\n});\ndefine('skylark-bootstrap4/button',[\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/plugins',\n    \"./bs4\"\n], function ($, plugins,bs4) {\n    'use strict';\n    const NAME = 'button';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.button';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const ClassName = {\n        ACTIVE: 'active',\n        BUTTON: 'btn',\n        FOCUS: 'focus'\n    };\n    const Selector = {\n        DATA_TOGGLE_CARROT: '[data-toggle^=\"button\"]',\n        DATA_TOGGLE: '[data-toggle=\"buttons\"]',\n        INPUT: 'input:not([type=\"hidden\"])',\n        ACTIVE: '.active',\n        BUTTON: '.btn'\n    };\n    const Event = {\n        CLICK_DATA_API: `click${ EVENT_KEY }${ DATA_API_KEY }`,\n        FOCUS_BLUR_DATA_API: `focus${ EVENT_KEY }${ DATA_API_KEY } ` + `blur${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    class Button {\n        constructor(element) {\n            this._element = element;\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        toggle() {\n            let triggerChangeEvent = true;\n            let addAriaPressed = true;\n            const rootElement = $(this._element).closest(Selector.DATA_TOGGLE)[0];\n            if (rootElement) {\n                const input = this._element.querySelector(Selector.INPUT);\n                if (input) {\n                    if (input.type === 'radio') {\n                        if (input.checked && this._element.classList.contains(ClassName.ACTIVE)) {\n                            triggerChangeEvent = false;\n                        } else {\n                            const activeElement = rootElement.querySelector(Selector.ACTIVE);\n                            if (activeElement) {\n                                $(activeElement).removeClass(ClassName.ACTIVE);\n                            }\n                        }\n                    }\n                    if (triggerChangeEvent) {\n                        if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {\n                            return;\n                        }\n                        input.checked = !this._element.classList.contains(ClassName.ACTIVE);\n                        $(input).trigger('change');\n                    }\n                    input.focus();\n                    addAriaPressed = false;\n                }\n            }\n            if (addAriaPressed) {\n                this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName.ACTIVE));\n            }\n            if (triggerChangeEvent) {\n                $(this._element).toggleClass(ClassName.ACTIVE);\n            }\n        }\n        dispose() {\n            $.removeData(this._element, DATA_KEY);\n            this._element = null;\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                if (!data) {\n                    data = new Button(this);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (config === 'toggle') {\n                    data[config]();\n                }\n            });\n        }\n    }\n    $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, event => {\n        event.preventDefault();\n        let button = event.target;\n        if (!$(button).hasClass(ClassName.BUTTON)) {\n            button = $(button).closest(Selector.BUTTON);\n        }\n        Button._jqueryInterface.call($(button), 'toggle');\n    }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, event => {\n        const button = $(event.target).closest(Selector.BUTTON)[0];\n        $(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));\n    });\n\n    $.fn[NAME] = Button._jqueryInterface;\n    $.fn[NAME].Constructor = Button;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Button._jqueryInterface;\n    };\n\n\n    return bs4.Button = Button;\n});\ndefine('skylark-bootstrap4/carousel',[\n    'skylark-langx/langx',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/eventer',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './util'\n], function (langx,$, eventer,plugins,bs4,Util) {\n\n    'use strict';\n    const NAME = 'carousel';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.carousel';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const ARROW_LEFT_KEYCODE = 37;\n    const ARROW_RIGHT_KEYCODE = 39;\n    const TOUCHEVENT_COMPAT_WAIT = 500;\n    const SWIPE_THRESHOLD = 40;\n    const Default = {\n        interval: 5000,\n        keyboard: true,\n        slide: false,\n        pause: 'hover',\n        wrap: true,\n        touch: true\n    };\n    const DefaultType = {\n        interval: '(number|boolean)',\n        keyboard: 'boolean',\n        slide: '(boolean|string)',\n        pause: '(string|boolean)',\n        wrap: 'boolean',\n        touch: 'boolean'\n    };\n    const Direction = {\n        NEXT: 'next',\n        PREV: 'prev',\n        LEFT: 'left',\n        RIGHT: 'right'\n    };\n    const Event = {\n        SLIDE: `slide${ EVENT_KEY }`,\n        SLID: `slid${ EVENT_KEY }`,\n        KEYDOWN: `keydown${ EVENT_KEY }`,\n        MOUSEENTER: `mouseenter${ EVENT_KEY }`,\n        MOUSELEAVE: `mouseleave${ EVENT_KEY }`,\n        TOUCHSTART: `touchstart${ EVENT_KEY }`,\n        TOUCHMOVE: `touchmove${ EVENT_KEY }`,\n        TOUCHEND: `touchend${ EVENT_KEY }`,\n        POINTERDOWN: `pointerdown${ EVENT_KEY }`,\n        POINTERUP: `pointerup${ EVENT_KEY }`,\n        DRAG_START: `dragstart${ EVENT_KEY }`,\n        LOAD_DATA_API: `load${ EVENT_KEY }${ DATA_API_KEY }`,\n        CLICK_DATA_API: `click${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    const ClassName = {\n        CAROUSEL: 'carousel',\n        ACTIVE: 'active',\n        SLIDE: 'slide',\n        RIGHT: 'carousel-item-right',\n        LEFT: 'carousel-item-left',\n        NEXT: 'carousel-item-next',\n        PREV: 'carousel-item-prev',\n        ITEM: 'carousel-item',\n        POINTER_EVENT: 'pointer-event'\n    };\n    const Selector = {\n        ACTIVE: '.active',\n        ACTIVE_ITEM: '.active.carousel-item',\n        ITEM: '.carousel-item',\n        ITEM_IMG: '.carousel-item img',\n        NEXT_PREV: '.carousel-item-next, .carousel-item-prev',\n        INDICATORS: '.carousel-indicators',\n        DATA_SLIDE: '[data-slide], [data-slide-to]',\n        DATA_RIDE: '[data-ride=\"carousel\"]'\n    };\n    const PointerType = {\n        TOUCH: 'touch',\n        PEN: 'pen'\n    };\n    class Carousel {\n        constructor(element, config) {\n            this._items = null;\n            this._interval = null;\n            this._activeElement = null;\n            this._isPaused = false;\n            this._isSliding = false;\n            this.touchTimeout = null;\n            this.touchStartX = 0;\n            this.touchDeltaX = 0;\n            this._config = this._getConfig(config);\n            this._element = element;\n            this._indicatorsElement = this._element.querySelector(Selector.INDICATORS);\n            this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n            this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);\n            this._addEventListeners();\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        next() {\n            if (!this._isSliding) {\n                this._slide(Direction.NEXT);\n            }\n        }\n        nextWhenVisible() {\n            if (!document.hidden && ($(this._element).is(':visible') && $(this._element).css('visibility') !== 'hidden')) {\n                this.next();\n            }\n        }\n        prev() {\n            if (!this._isSliding) {\n                this._slide(Direction.PREV);\n            }\n        }\n        pause(event) {\n            if (!event) {\n                this._isPaused = true;\n            }\n            if (this._element.querySelector(Selector.NEXT_PREV)) {\n                Util.triggerTransitionEnd(this._element);\n                this.cycle(true);\n            }\n            clearInterval(this._interval);\n            this._interval = null;\n        }\n        cycle(event) {\n            if (!event) {\n                this._isPaused = false;\n            }\n            if (this._interval) {\n                clearInterval(this._interval);\n                this._interval = null;\n            }\n            if (this._config.interval && !this._isPaused) {\n                this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n            }\n        }\n        to(index) {\n            this._activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);\n            const activeIndex = this._getItemIndex(this._activeElement);\n            if (index > this._items.length - 1 || index < 0) {\n                return;\n            }\n            if (this._isSliding) {\n                $(this._element).one(Event.SLID, () => this.to(index));\n                return;\n            }\n            if (activeIndex === index) {\n                this.pause();\n                this.cycle();\n                return;\n            }\n            const direction = index > activeIndex ? Direction.NEXT : Direction.PREV;\n            this._slide(direction, this._items[index]);\n        }\n        dispose() {\n            $(this._element).off(EVENT_KEY);\n            $.removeData(this._element, DATA_KEY);\n            this._items = null;\n            this._config = null;\n            this._element = null;\n            this._interval = null;\n            this._isPaused = null;\n            this._isSliding = null;\n            this._activeElement = null;\n            this._indicatorsElement = null;\n        }\n        _getConfig(config) {\n            //config = {\n            //    ...Default,\n            //    ...config\n            //};\n            config = langx.mixin({},Default,config);\n            Util.typeCheckConfig(NAME, config, DefaultType);\n            return config;\n        }\n        _handleSwipe() {\n            const absDeltax = Math.abs(this.touchDeltaX);\n            if (absDeltax <= SWIPE_THRESHOLD) {\n                return;\n            }\n            const direction = absDeltax / this.touchDeltaX;\n            if (direction > 0) {\n                this.prev();\n            }\n            if (direction < 0) {\n                this.next();\n            }\n        }\n        _addEventListeners() {\n            if (this._config.keyboard) {\n                $(this._element).on(Event.KEYDOWN, event => this._keydown(event));\n            }\n            if (this._config.pause === 'hover') {\n                $(this._element).on(Event.MOUSEENTER, event => this.pause(event)).on(Event.MOUSELEAVE, event => this.cycle(event));\n            }\n            this._addTouchEventListeners();\n        }\n        _addTouchEventListeners() {\n            if (!this._touchSupported) {\n                return;\n            }\n            const start = event => {\n                if (this._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {\n                    this.touchStartX = event.originalEvent.clientX;\n                } else if (!this._pointerEvent) {\n                    this.touchStartX = event.originalEvent.touches[0].clientX;\n                }\n            };\n            const move = event => {\n                if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {\n                    this.touchDeltaX = 0;\n                } else {\n                    this.touchDeltaX = event.originalEvent.touches[0].clientX - this.touchStartX;\n                }\n            };\n            const end = event => {\n                if (this._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {\n                    this.touchDeltaX = event.originalEvent.clientX - this.touchStartX;\n                }\n                this._handleSwipe();\n                if (this._config.pause === 'hover') {\n                    this.pause();\n                    if (this.touchTimeout) {\n                        clearTimeout(this.touchTimeout);\n                    }\n                    this.touchTimeout = setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n                }\n            };\n            $(this._element.querySelectorAll(Selector.ITEM_IMG)).on(Event.DRAG_START, e => e.preventDefault());\n            if (this._pointerEvent) {\n                $(this._element).on(Event.POINTERDOWN, event => start(event));\n                $(this._element).on(Event.POINTERUP, event => end(event));\n                this._element.classList.add(ClassName.POINTER_EVENT);\n            } else {\n                $(this._element).on(Event.TOUCHSTART, event => start(event));\n                $(this._element).on(Event.TOUCHMOVE, event => move(event));\n                $(this._element).on(Event.TOUCHEND, event => end(event));\n            }\n        }\n        _keydown(event) {\n            if (/input|textarea/i.test(event.target.tagName)) {\n                return;\n            }\n            switch (event.which) {\n            case ARROW_LEFT_KEYCODE:\n                event.preventDefault();\n                this.prev();\n                break;\n            case ARROW_RIGHT_KEYCODE:\n                event.preventDefault();\n                this.next();\n                break;\n            default:\n            }\n        }\n        _getItemIndex(element) {\n            this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(Selector.ITEM)) : [];\n            return this._items.indexOf(element);\n        }\n        _getItemByDirection(direction, activeElement) {\n            const isNextDirection = direction === Direction.NEXT;\n            const isPrevDirection = direction === Direction.PREV;\n            const activeIndex = this._getItemIndex(activeElement);\n            const lastItemIndex = this._items.length - 1;\n            const isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;\n            if (isGoingToWrap && !this._config.wrap) {\n                return activeElement;\n            }\n            const delta = direction === Direction.PREV ? -1 : 1;\n            const itemIndex = (activeIndex + delta) % this._items.length;\n            return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];\n        }\n        _triggerSlideEvent(relatedTarget, eventDirectionName) {\n            const targetIndex = this._getItemIndex(relatedTarget);\n            const fromIndex = this._getItemIndex(this._element.querySelector(Selector.ACTIVE_ITEM));\n            const slideEvent = eventer.create(Event.SLIDE, {\n                relatedTarget,\n                direction: eventDirectionName,\n                from: fromIndex,\n                to: targetIndex\n            });\n            $(this._element).trigger(slideEvent);\n            return slideEvent;\n        }\n        _setActiveIndicatorElement(element) {\n            if (this._indicatorsElement) {\n                const indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector.ACTIVE));\n                $(indicators).removeClass(ClassName.ACTIVE);\n                const nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];\n                if (nextIndicator) {\n                    $(nextIndicator).addClass(ClassName.ACTIVE);\n                }\n            }\n        }\n        _slide(direction, element) {\n            const activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);\n            const activeElementIndex = this._getItemIndex(activeElement);\n            const nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);\n            const nextElementIndex = this._getItemIndex(nextElement);\n            const isCycling = Boolean(this._interval);\n            let directionalClassName;\n            let orderClassName;\n            let eventDirectionName;\n            if (direction === Direction.NEXT) {\n                directionalClassName = ClassName.LEFT;\n                orderClassName = ClassName.NEXT;\n                eventDirectionName = Direction.LEFT;\n            } else {\n                directionalClassName = ClassName.RIGHT;\n                orderClassName = ClassName.PREV;\n                eventDirectionName = Direction.RIGHT;\n            }\n            if (nextElement && $(nextElement).hasClass(ClassName.ACTIVE)) {\n                this._isSliding = false;\n                return;\n            }\n            const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n            if (slideEvent.isDefaultPrevented()) {\n                return;\n            }\n            if (!activeElement || !nextElement) {\n                return;\n            }\n            this._isSliding = true;\n            if (isCycling) {\n                this.pause();\n            }\n            this._setActiveIndicatorElement(nextElement);\n            const slidEvent = eventer.create(Event.SLID, {\n                relatedTarget: nextElement,\n                direction: eventDirectionName,\n                from: activeElementIndex,\n                to: nextElementIndex\n            });\n            if ($(this._element).hasClass(ClassName.SLIDE)) {\n                $(nextElement).addClass(orderClassName);\n                Util.reflow(nextElement);\n                $(activeElement).addClass(directionalClassName);\n                $(nextElement).addClass(directionalClassName);\n                const nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);\n                if (nextElementInterval) {\n                    this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n                    this._config.interval = nextElementInterval;\n                } else {\n                    this._config.interval = this._config.defaultInterval || this._config.interval;\n                }\n                const transitionDuration = Util.getTransitionDurationFromElement(activeElement);\n                $(activeElement).one(Util.TRANSITION_END, () => {\n                    $(nextElement).removeClass(`${ directionalClassName } ${ orderClassName }`).addClass(ClassName.ACTIVE);\n                    $(activeElement).removeClass(`${ ClassName.ACTIVE } ${ orderClassName } ${ directionalClassName }`);\n                    this._isSliding = false;\n                    setTimeout(() => $(this._element).trigger(slidEvent), 0);\n                }).emulateTransitionEnd(transitionDuration);\n            } else {\n                $(activeElement).removeClass(ClassName.ACTIVE);\n                $(nextElement).addClass(ClassName.ACTIVE);\n                this._isSliding = false;\n                $(this._element).trigger(slidEvent);\n            }\n            if (isCycling) {\n                this.cycle();\n            }\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                //let _config = {\n                //    ...Default,\n                //    ...$(this).data()\n                //};\n                let _config = langx.mixin({},Default,$(this).data());\n                if (typeof config === 'object') {\n                    //_config = {\n                    //    ..._config,\n                    //    ...config\n                    //};\n                    langx.mixin(_config,config);\n                }\n                const action = typeof config === 'string' ? config : _config.slide;\n                if (!data) {\n                    data = new Carousel(this, _config);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (typeof config === 'number') {\n                    data.to(config);\n                } else if (typeof action === 'string') {\n                    if (typeof data[action] === 'undefined') {\n                        throw new TypeError(`No method named \"${ action }\"`);\n                    }\n                    data[action]();\n                } else if (_config.interval) {\n                    data.pause();\n                    data.cycle();\n                }\n            });\n        }\n        static _dataApiClickHandler(event) {\n            const selector = Util.getSelectorFromElement(this);\n            if (!selector) {\n                return;\n            }\n            const target = $(selector)[0];\n            if (!target || !$(target).hasClass(ClassName.CAROUSEL)) {\n                return;\n            }\n            //const config = {\n            //    ...$(target).data(),\n            //    ...$(this).data()\n            //};\n            const config = langx.mixin({},$(target).data(),$(this).data());\n            const slideIndex = this.getAttribute('data-slide-to');\n            if (slideIndex) {\n                config.interval = false;\n            }\n            Carousel._jqueryInterface.call($(target), config);\n            if (slideIndex) {\n                $(target).data(DATA_KEY).to(slideIndex);\n            }\n            event.preventDefault();\n        }\n    }\n    $(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);\n    $(window).on(Event.LOAD_DATA_API, () => {\n        const carousels = [].slice.call(document.querySelectorAll(Selector.DATA_RIDE));\n        for (let i = 0, len = carousels.length; i < len; i++) {\n            const $carousel = $(carousels[i]);\n            Carousel._jqueryInterface.call($carousel, $carousel.data());\n        }\n    });\n    $.fn[NAME] = Carousel._jqueryInterface;\n    $.fn[NAME].Constructor = Carousel;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Carousel._jqueryInterface;\n    };\n    return Carousel;\n});\ndefine('skylark-bootstrap4/collapse',[\n    'skylark-langx/langx',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/eventer',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './util'\n], function (langx,$, eventer, plugins,bs4,Util) {\n\n    'use strict';\n    const NAME = 'collapse';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.collapse';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const Default = {\n        toggle: true,\n        parent: ''\n    };\n    const DefaultType = {\n        toggle: 'boolean',\n        parent: '(string|element)'\n    };\n    const Event = {\n        SHOW: `show${ EVENT_KEY }`,\n        SHOWN: `shown${ EVENT_KEY }`,\n        HIDE: `hide${ EVENT_KEY }`,\n        HIDDEN: `hidden${ EVENT_KEY }`,\n        CLICK_DATA_API: `click${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    const ClassName = {\n        SHOW: 'show',\n        COLLAPSE: 'collapse',\n        COLLAPSING: 'collapsing',\n        COLLAPSED: 'collapsed'\n    };\n    const Dimension = {\n        WIDTH: 'width',\n        HEIGHT: 'height'\n    };\n    const Selector = {\n        ACTIVES: '.show, .collapsing',\n        DATA_TOGGLE: '[data-toggle=\"collapse\"]'\n    };\n    class Collapse {\n        constructor(element, config) {\n            this._isTransitioning = false;\n            this._element = element;\n            this._config = this._getConfig(config);\n            this._triggerArray = [].slice.call(document.querySelectorAll(`[data-toggle=\"collapse\"][href=\"#${ element.id }\"],` + `[data-toggle=\"collapse\"][data-target=\"#${ element.id }\"]`));\n            const toggleList = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));\n            for (let i = 0, len = toggleList.length; i < len; i++) {\n                const elem = toggleList[i];\n                const selector = Util.getSelectorFromElement(elem);\n                const filterElement = [].slice.call(document.querySelectorAll(selector)).filter(foundElem => foundElem === element);\n                if (selector !== null && filterElement.length > 0) {\n                    this._selector = selector;\n                    this._triggerArray.push(elem);\n                }\n            }\n            this._parent = this._config.parent ? this._getParent() : null;\n            if (!this._config.parent) {\n                this._addAriaAndCollapsedClass(this._element, this._triggerArray);\n            }\n            if (this._config.toggle) {\n                this.toggle();\n            }\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        toggle() {\n            if ($(this._element).hasClass(ClassName.SHOW)) {\n                this.hide();\n            } else {\n                this.show();\n            }\n        }\n        show() {\n            if (this._isTransitioning || $(this._element).hasClass(ClassName.SHOW)) {\n                return;\n            }\n            let actives;\n            let activesData;\n            if (this._parent) {\n                actives = [].slice.call(this._parent.querySelectorAll(Selector.ACTIVES)).filter(elem => {\n                    if (typeof this._config.parent === 'string') {\n                        return elem.getAttribute('data-parent') === this._config.parent;\n                    }\n                    return elem.classList.contains(ClassName.COLLAPSE);\n                });\n                if (actives.length === 0) {\n                    actives = null;\n                }\n            }\n            if (actives) {\n                activesData = $(actives).not(this._selector).data(DATA_KEY);\n                if (activesData && activesData._isTransitioning) {\n                    return;\n                }\n            }\n            const startEvent = eventer.create(Event.SHOW);\n            $(this._element).trigger(startEvent);\n            if (startEvent.isDefaultPrevented()) {\n                return;\n            }\n            if (actives) {\n                Collapse._jqueryInterface.call($(actives).not(this._selector), 'hide');\n                if (!activesData) {\n                    $(actives).data(DATA_KEY, null);\n                }\n            }\n            const dimension = this._getDimension();\n            $(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);\n            this._element.style[dimension] = 0;\n            if (this._triggerArray.length) {\n                $(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);\n            }\n            this.setTransitioning(true);\n            const complete = () => {\n                $(this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);\n                this._element.style[dimension] = '';\n                this.setTransitioning(false);\n                $(this._element).trigger(Event.SHOWN);\n            };\n            const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n            const scrollSize = `scroll${ capitalizedDimension }`;\n            const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n            $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n            this._element.style[dimension] = `${ this._element[scrollSize] }px`;\n        }\n        hide() {\n            if (this._isTransitioning || !$(this._element).hasClass(ClassName.SHOW)) {\n                return;\n            }\n            const startEvent = eventer.create(Event.HIDE);\n            $(this._element).trigger(startEvent);\n            if (startEvent.isDefaultPrevented()) {\n                return;\n            }\n            const dimension = this._getDimension();\n            this._element.style[dimension] = `${ this._element.getBoundingClientRect()[dimension] }px`;\n            Util.reflow(this._element);\n            $(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);\n            const triggerArrayLength = this._triggerArray.length;\n            if (triggerArrayLength > 0) {\n                for (let i = 0; i < triggerArrayLength; i++) {\n                    const trigger = this._triggerArray[i];\n                    const selector = Util.getSelectorFromElement(trigger);\n                    if (selector !== null) {\n                        const $elem = $([].slice.call(document.querySelectorAll(selector)));\n                        if (!$elem.hasClass(ClassName.SHOW)) {\n                            $(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);\n                        }\n                    }\n                }\n            }\n            this.setTransitioning(true);\n            const complete = () => {\n                this.setTransitioning(false);\n                $(this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);\n            };\n            this._element.style[dimension] = '';\n            const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n            $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n        }\n        setTransitioning(isTransitioning) {\n            this._isTransitioning = isTransitioning;\n        }\n        dispose() {\n            $.removeData(this._element, DATA_KEY);\n            this._config = null;\n            this._parent = null;\n            this._element = null;\n            this._triggerArray = null;\n            this._isTransitioning = null;\n        }\n        _getConfig(config) {\n            //config = {\n            //    ...Default,\n            //    ...config\n            //};\n            config = langx.mixin({},Default,config);\n            config.toggle = Boolean(config.toggle);\n            Util.typeCheckConfig(NAME, config, DefaultType);\n            return config;\n        }\n        _getDimension() {\n            const hasWidth = $(this._element).hasClass(Dimension.WIDTH);\n            return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;\n        }\n        _getParent() {\n            let parent;\n            if (Util.isElement(this._config.parent)) {\n                parent = this._config.parent;\n                if (typeof this._config.parent.skylark-utils-dom/query !== 'undefined') {\n                    parent = this._config.parent[0];\n                }\n            } else {\n                parent = document.querySelector(this._config.parent);\n            }\n            const selector = `[data-toggle=\"collapse\"][data-parent=\"${ this._config.parent }\"]`;\n            const children = [].slice.call(parent.querySelectorAll(selector));\n            $(children).each((i, element) => {\n                this._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);\n            });\n            return parent;\n        }\n        _addAriaAndCollapsedClass(element, triggerArray) {\n            const isOpen = $(element).hasClass(ClassName.SHOW);\n            if (triggerArray.length) {\n                $(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);\n            }\n        }\n        static _getTargetFromElement(element) {\n            const selector = Util.getSelectorFromElement(element);\n            return selector ? document.querySelector(selector) : null;\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                const $this = $(this);\n                let data = $this.data(DATA_KEY);\n                //const _config = {\n                //    ...Default,\n                //    ...$this.data(),\n                //    ...typeof config === 'object' && config ? config : {}\n                //};\n                const _config = langx.mixin({},Default,$this.data(),typeof config === 'object' && config ? config : {});\n\n                if (!data && _config.toggle && /show|hide/.test(config)) {\n                    _config.toggle = false;\n                }\n                if (!data) {\n                    data = new Collapse(this, _config);\n                    $this.data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n        if (event.currentTarget.tagName === 'A') {\n            event.preventDefault();\n        }\n        const $trigger = $(this);\n        const selector = Util.getSelectorFromElement(this);\n        const selectors = [].slice.call(document.querySelectorAll(selector));\n        $(selectors).each(function () {\n            const $target = $(this);\n            const data = $target.data(DATA_KEY);\n            const config = data ? 'toggle' : $trigger.data();\n            Collapse._jqueryInterface.call($target, config);\n        });\n    });\n    $.fn[NAME] = Collapse._jqueryInterface;\n    $.fn[NAME].Constructor = Collapse;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Collapse._jqueryInterface;\n    };\n    return Collapse;\n});\ndefine('skylark-bootstrap4/dropdown',[\n    'skylark-langx/langx',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/eventer',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    'skylark-popper/Popper',\n    './util'\n], function (langx,$, eventer,plugins,bs4,Popper,Util) {\n    'use strict';\n    const NAME = 'dropdown';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.dropdown';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const ESCAPE_KEYCODE = 27;\n    const SPACE_KEYCODE = 32;\n    const TAB_KEYCODE = 9;\n    const ARROW_UP_KEYCODE = 38;\n    const ARROW_DOWN_KEYCODE = 40;\n    const RIGHT_MOUSE_BUTTON_WHICH = 3;\n    const REGEXP_KEYDOWN = new RegExp(`${ ARROW_UP_KEYCODE }|${ ARROW_DOWN_KEYCODE }|${ ESCAPE_KEYCODE }`);\n    const Event = {\n        HIDE: `hide${ EVENT_KEY }`,\n        HIDDEN: `hidden${ EVENT_KEY }`,\n        SHOW: `show${ EVENT_KEY }`,\n        SHOWN: `shown${ EVENT_KEY }`,\n        CLICK: `click${ EVENT_KEY }`,\n        CLICK_DATA_API: `click${ EVENT_KEY }${ DATA_API_KEY }`,\n        KEYDOWN_DATA_API: `keydown${ EVENT_KEY }${ DATA_API_KEY }`,\n        KEYUP_DATA_API: `keyup${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    const ClassName = {\n        DISABLED: 'disabled',\n        SHOW: 'show',\n        DROPUP: 'dropup',\n        DROPRIGHT: 'dropright',\n        DROPLEFT: 'dropleft',\n        MENURIGHT: 'dropdown-menu-right',\n        MENULEFT: 'dropdown-menu-left',\n        POSITION_STATIC: 'position-static'\n    };\n    const Selector = {\n        DATA_TOGGLE: '[data-toggle=\"dropdown\"]',\n        FORM_CHILD: '.dropdown form',\n        MENU: '.dropdown-menu',\n        NAVBAR_NAV: '.navbar-nav',\n        VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'\n    };\n    const AttachmentMap = {\n        TOP: 'top-start',\n        TOPEND: 'top-end',\n        BOTTOM: 'bottom-start',\n        BOTTOMEND: 'bottom-end',\n        RIGHT: 'right-start',\n        RIGHTEND: 'right-end',\n        LEFT: 'left-start',\n        LEFTEND: 'left-end'\n    };\n    const Default = {\n        offset: 0,\n        flip: true,\n        boundary: 'scrollParent',\n        reference: 'toggle',\n        display: 'dynamic'\n    };\n    const DefaultType = {\n        offset: '(number|string|function)',\n        flip: 'boolean',\n        boundary: '(string|element)',\n        reference: '(string|element)',\n        display: 'string'\n    };\n    class Dropdown {\n        constructor(element, config) {\n            this._element = element;\n            this._popper = null;\n            this._config = this._getConfig(config);\n            this._menu = this._getMenuElement();\n            this._inNavbar = this._detectNavbar();\n            this._addEventListeners();\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        static get DefaultType() {\n            return DefaultType;\n        }\n        toggle() {\n            if (this._element.disabled || $(this._element).hasClass(ClassName.DISABLED)) {\n                return;\n            }\n            const parent = Dropdown._getParentFromElement(this._element);\n            const isActive = $(this._menu).hasClass(ClassName.SHOW);\n            Dropdown._clearMenus();\n            if (isActive) {\n                return;\n            }\n            const relatedTarget = { relatedTarget: this._element };\n            const showEvent = eventer.create(Event.SHOW, relatedTarget);\n            $(parent).trigger(showEvent);\n            if (showEvent.isDefaultPrevented()) {\n                return;\n            }\n            if (!this._inNavbar) {\n                if (typeof Popper === 'undefined') {\n                    throw new TypeError(\"Bootstrap's dropdowns require skylark-popper/Popper (https://skylark-popper/Popper.org/)\");\n                }\n                let referenceElement = this._element;\n                if (this._config.reference === 'parent') {\n                    referenceElement = parent;\n                } else if (Util.isElement(this._config.reference)) {\n                    referenceElement = this._config.reference;\n                    if (typeof this._config.reference.skylark-utils-dom/query !== 'undefined') {\n                        referenceElement = this._config.reference[0];\n                    }\n                }\n                if (this._config.boundary !== 'scrollParent') {\n                    $(parent).addClass(ClassName.POSITION_STATIC);\n                }\n                this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());\n            }\n            if ('ontouchstart' in document.documentElement && $(parent).closest(Selector.NAVBAR_NAV).length === 0) {\n                $(document.body).children().on('mouseover', null, $.noop);\n            }\n            this._element.focus();\n            this._element.setAttribute('aria-expanded', true);\n            $(this._menu).toggleClass(ClassName.SHOW);\n            $(parent).toggleClass(ClassName.SHOW).trigger(eventer.create(Event.SHOWN, relatedTarget));\n        }\n        show() {\n            if (this._element.disabled || $(this._element).hasClass(ClassName.DISABLED) || $(this._menu).hasClass(ClassName.SHOW)) {\n                return;\n            }\n            const relatedTarget = { relatedTarget: this._element };\n            const showEvent = eventer.create(Event.SHOW, relatedTarget);\n            const parent = Dropdown._getParentFromElement(this._element);\n            $(parent).trigger(showEvent);\n            if (showEvent.isDefaultPrevented()) {\n                return;\n            }\n            $(this._menu).toggleClass(ClassName.SHOW);\n            $(parent).toggleClass(ClassName.SHOW).trigger(eventer.create(Event.SHOWN, relatedTarget));\n        }\n        hide() {\n            if (this._element.disabled || $(this._element).hasClass(ClassName.DISABLED) || !$(this._menu).hasClass(ClassName.SHOW)) {\n                return;\n            }\n            const relatedTarget = { relatedTarget: this._element };\n            const hideEvent = eventer.create(Event.HIDE, relatedTarget);\n            const parent = Dropdown._getParentFromElement(this._element);\n            $(parent).trigger(hideEvent);\n            if (hideEvent.isDefaultPrevented()) {\n                return;\n            }\n            $(this._menu).toggleClass(ClassName.SHOW);\n            $(parent).toggleClass(ClassName.SHOW).trigger(eventer.create(Event.HIDDEN, relatedTarget));\n        }\n        dispose() {\n            $.removeData(this._element, DATA_KEY);\n            $(this._element).off(EVENT_KEY);\n            this._element = null;\n            this._menu = null;\n            if (this._popper !== null) {\n                this._popper.destroy();\n                this._popper = null;\n            }\n        }\n        update() {\n            this._inNavbar = this._detectNavbar();\n            if (this._popper !== null) {\n                this._popper.scheduleUpdate();\n            }\n        }\n        _addEventListeners() {\n            $(this._element).on(Event.CLICK, event => {\n                event.preventDefault();\n                event.stopPropagation();\n                this.toggle();\n            });\n        }\n        _getConfig(config) {\n            //config = {\n            //    ...this.constructor.Default,\n            //    ...$(this._element).data(),\n            //    ...config\n            //};\n            config = langx.mixin({},this.constructor.Default,$(this._element).data(),config);\n            Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\n            return config;\n        }\n        _getMenuElement() {\n            if (!this._menu) {\n                const parent = Dropdown._getParentFromElement(this._element);\n                if (parent) {\n                    this._menu = parent.querySelector(Selector.MENU);\n                }\n            }\n            return this._menu;\n        }\n        _getPlacement() {\n            const $parentDropdown = $(this._element.parentNode);\n            let placement = AttachmentMap.BOTTOM;\n            if ($parentDropdown.hasClass(ClassName.DROPUP)) {\n                placement = AttachmentMap.TOP;\n                if ($(this._menu).hasClass(ClassName.MENURIGHT)) {\n                    placement = AttachmentMap.TOPEND;\n                }\n            } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {\n                placement = AttachmentMap.RIGHT;\n            } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {\n                placement = AttachmentMap.LEFT;\n            } else if ($(this._menu).hasClass(ClassName.MENURIGHT)) {\n                placement = AttachmentMap.BOTTOMEND;\n            }\n            return placement;\n        }\n        _detectNavbar() {\n            return $(this._element).closest('.navbar').length > 0;\n        }\n        _getPopperConfig() {\n            const offsetConf = {};\n            if (typeof this._config.offset === 'function') {\n                offsetConf.fn = data => {\n                    //data.offsets = {\n                    //    ...data.offsets,\n                    //    ...this._config.offset(data.offsets) || {}\n                    //};\n                    langx.mixin(data.offsets,this._config.offset(data.offsets) || {});\n                    return data;\n                };\n            } else {\n                offsetConf.offset = this._config.offset;\n            }\n            const popperConfig = {\n                placement: this._getPlacement(),\n                modifiers: {\n                    offset: offsetConf,\n                    flip: { enabled: this._config.flip },\n                    preventOverflow: { boundariesElement: this._config.boundary }\n                }\n            };\n            if (this._config.display === 'static') {\n                popperConfig.modifiers.applyStyle = { enabled: false };\n            }\n            return popperConfig;\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                const _config = typeof config === 'object' ? config : null;\n                if (!data) {\n                    data = new Dropdown(this, _config);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n        static _clearMenus(event) {\n            if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {\n                return;\n            }\n            const toggles = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));\n            for (let i = 0, len = toggles.length; i < len; i++) {\n                const parent = Dropdown._getParentFromElement(toggles[i]);\n                const context = $(toggles[i]).data(DATA_KEY);\n                const relatedTarget = { relatedTarget: toggles[i] };\n                if (event && event.type === 'click') {\n                    relatedTarget.clickEvent = event;\n                }\n                if (!context) {\n                    continue;\n                }\n                const dropdownMenu = context._menu;\n                if (!$(parent).hasClass(ClassName.SHOW)) {\n                    continue;\n                }\n                if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $.contains(parent, event.target)) {\n                    continue;\n                }\n                const hideEvent = eventer.create(Event.HIDE, relatedTarget);\n                $(parent).trigger(hideEvent);\n                if (hideEvent.isDefaultPrevented()) {\n                    continue;\n                }\n                if ('ontouchstart' in document.documentElement) {\n                    $(document.body).children().off('mouseover', null, $.noop);\n                }\n                toggles[i].setAttribute('aria-expanded', 'false');\n                $(dropdownMenu).removeClass(ClassName.SHOW);\n                $(parent).removeClass(ClassName.SHOW).trigger(eventer.create(Event.HIDDEN, relatedTarget));\n            }\n        }\n        static _getParentFromElement(element) {\n            let parent;\n            const selector = Util.getSelectorFromElement(element);\n            if (selector) {\n                parent = document.querySelector(selector);\n            }\n            return parent || element.parentNode;\n        }\n        static _dataApiKeydownHandler(event) {\n            if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {\n                return;\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {\n                return;\n            }\n            const parent = Dropdown._getParentFromElement(this);\n            const isActive = $(parent).hasClass(ClassName.SHOW);\n            if (!isActive || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {\n                if (event.which === ESCAPE_KEYCODE) {\n                    const toggle = parent.querySelector(Selector.DATA_TOGGLE);\n                    $(toggle).trigger('focus');\n                }\n                $(this).trigger('click');\n                return;\n            }\n            const items = [].slice.call(parent.querySelectorAll(Selector.VISIBLE_ITEMS));\n            if (items.length === 0) {\n                return;\n            }\n            let index = items.indexOf(event.target);\n            if (event.which === ARROW_UP_KEYCODE && index > 0) {\n                index--;\n            }\n            if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {\n                index++;\n            }\n            if (index < 0) {\n                index = 0;\n            }\n            items[index].focus();\n        }\n    }\n    $(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(`${ Event.CLICK_DATA_API } ${ Event.KEYUP_DATA_API }`, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n        Dropdown._jqueryInterface.call($(this), 'toggle');\n    }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, e => {\n        e.stopPropagation();\n    });\n    $.fn[NAME] = Dropdown._jqueryInterface;\n    $.fn[NAME].Constructor = Dropdown;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Dropdown._jqueryInterface;\n    };\n    return Dropdown;\n});\ndefine('skylark-bootstrap4/modal',[\n    'skylark-langx/langx',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/eventer',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './util'\n], function (langx,$, eventer,plugins,bs4,Util) {\n\n\n    'use strict';\n    const NAME = 'modal';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.modal';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const ESCAPE_KEYCODE = 27;\n    const Default = {\n        backdrop: true,\n        keyboard: true,\n        focus: true,\n        show: true\n    };\n    const DefaultType = {\n        backdrop: '(boolean|string)',\n        keyboard: 'boolean',\n        focus: 'boolean',\n        show: 'boolean'\n    };\n    const Event = {\n        HIDE: `hide${ EVENT_KEY }`,\n        HIDDEN: `hidden${ EVENT_KEY }`,\n        SHOW: `show${ EVENT_KEY }`,\n        SHOWN: `shown${ EVENT_KEY }`,\n        FOCUSIN: `focusin${ EVENT_KEY }`,\n        RESIZE: `resize${ EVENT_KEY }`,\n        CLICK_DISMISS: `click.dismiss${ EVENT_KEY }`,\n        KEYDOWN_DISMISS: `keydown.dismiss${ EVENT_KEY }`,\n        MOUSEUP_DISMISS: `mouseup.dismiss${ EVENT_KEY }`,\n        MOUSEDOWN_DISMISS: `mousedown.dismiss${ EVENT_KEY }`,\n        CLICK_DATA_API: `click${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    const ClassName = {\n        SCROLLBAR_MEASURER: 'modal-scrollbar-measure',\n        BACKDROP: 'modal-backdrop',\n        OPEN: 'modal-open',\n        FADE: 'fade',\n        SHOW: 'show'\n    };\n    const Selector = {\n        DIALOG: '.modal-dialog',\n        DATA_TOGGLE: '[data-toggle=\"modal\"]',\n        DATA_DISMISS: '[data-dismiss=\"modal\"]',\n        FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n        STICKY_CONTENT: '.sticky-top'\n    };\n    class Modal {\n        constructor(element, config) {\n            this._config = this._getConfig(config);\n            this._element = element;\n            this._dialog = element.querySelector(Selector.DIALOG);\n            this._backdrop = null;\n            this._isShown = false;\n            this._isBodyOverflowing = false;\n            this._ignoreBackdropClick = false;\n            this._isTransitioning = false;\n            this._scrollbarWidth = 0;\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        toggle(relatedTarget) {\n            return this._isShown ? this.hide() : this.show(relatedTarget);\n        }\n        show(relatedTarget) {\n            if (this._isShown || this._isTransitioning) {\n                return;\n            }\n            if ($(this._element).hasClass(ClassName.FADE)) {\n                this._isTransitioning = true;\n            }\n            const showEvent = eventer.create(Event.SHOW, { relatedTarget });\n            $(this._element).trigger(showEvent);\n            if (this._isShown || showEvent.isDefaultPrevented()) {\n                return;\n            }\n            this._isShown = true;\n            this._checkScrollbar();\n            this._setScrollbar();\n            this._adjustDialog();\n            this._setEscapeEvent();\n            this._setResizeEvent();\n            $(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, event => this.hide(event));\n            $(this._dialog).on(Event.MOUSEDOWN_DISMISS, () => {\n                $(this._element).one(Event.MOUSEUP_DISMISS, event => {\n                    if ($(event.target).is(this._element)) {\n                        this._ignoreBackdropClick = true;\n                    }\n                });\n            });\n            this._showBackdrop(() => this._showElement(relatedTarget));\n        }\n        hide(event) {\n            if (event) {\n                event.preventDefault();\n            }\n            if (!this._isShown || this._isTransitioning) {\n                return;\n            }\n            const hideEvent = eventer.create(Event.HIDE);\n            $(this._element).trigger(hideEvent);\n            if (!this._isShown || hideEvent.isDefaultPrevented()) {\n                return;\n            }\n            this._isShown = false;\n            const transition = $(this._element).hasClass(ClassName.FADE);\n            if (transition) {\n                this._isTransitioning = true;\n            }\n            this._setEscapeEvent();\n            this._setResizeEvent();\n            $(document).off(Event.FOCUSIN);\n            $(this._element).removeClass(ClassName.SHOW);\n            $(this._element).off(Event.CLICK_DISMISS);\n            $(this._dialog).off(Event.MOUSEDOWN_DISMISS);\n            if (transition) {\n                const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n                $(this._element).one(Util.TRANSITION_END, event => this._hideModal(event)).emulateTransitionEnd(transitionDuration);\n            } else {\n                this._hideModal();\n            }\n        }\n        dispose() {\n            [\n                window,\n                this._element,\n                this._dialog\n            ].forEach(htmlElement => $(htmlElement).off(EVENT_KEY));\n            $(document).off(Event.FOCUSIN);\n            $.removeData(this._element, DATA_KEY);\n            this._config = null;\n            this._element = null;\n            this._dialog = null;\n            this._backdrop = null;\n            this._isShown = null;\n            this._isBodyOverflowing = null;\n            this._ignoreBackdropClick = null;\n            this._isTransitioning = null;\n            this._scrollbarWidth = null;\n        }\n        handleUpdate() {\n            this._adjustDialog();\n        }\n        _getConfig(config) {\n            //config = {\n            //    ...Default,\n            //    ...config\n            //};\n            config = langx.mixin({},Default,config);\n\n            Util.typeCheckConfig(NAME, config, DefaultType);\n            return config;\n        }\n        _showElement(relatedTarget) {\n            const transition = $(this._element).hasClass(ClassName.FADE);\n            if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n                document.body.appendChild(this._element);\n            }\n            this._element.style.display = 'block';\n            this._element.removeAttribute('aria-hidden');\n            this._element.setAttribute('aria-modal', true);\n            this._element.scrollTop = 0;\n            if (transition) {\n                Util.reflow(this._element);\n            }\n            $(this._element).addClass(ClassName.SHOW);\n            if (this._config.focus) {\n                this._enforceFocus();\n            }\n            const shownEvent = eventer.create(Event.SHOWN, { relatedTarget });\n            const transitionComplete = () => {\n                if (this._config.focus) {\n                    this._element.focus();\n                }\n                this._isTransitioning = false;\n                $(this._element).trigger(shownEvent);\n            };\n            if (transition) {\n                const transitionDuration = Util.getTransitionDurationFromElement(this._dialog);\n                $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);\n            } else {\n                transitionComplete();\n            }\n        }\n        _enforceFocus() {\n            $(document).off(Event.FOCUSIN).on(Event.FOCUSIN, event => {\n                if (document !== event.target && this._element !== event.target && $(this._element).has(event.target).length === 0) {\n                    this._element.focus();\n                }\n            });\n        }\n        _setEscapeEvent() {\n            if (this._isShown && this._config.keyboard) {\n                $(this._element).on(Event.KEYDOWN_DISMISS, event => {\n                    if (event.which === ESCAPE_KEYCODE) {\n                        event.preventDefault();\n                        this.hide();\n                    }\n                });\n            } else if (!this._isShown) {\n                $(this._element).off(Event.KEYDOWN_DISMISS);\n            }\n        }\n        _setResizeEvent() {\n            if (this._isShown) {\n                $(window).on(Event.RESIZE, event => this.handleUpdate(event));\n            } else {\n                $(window).off(Event.RESIZE);\n            }\n        }\n        _hideModal() {\n            this._element.style.display = 'none';\n            this._element.setAttribute('aria-hidden', true);\n            this._element.removeAttribute('aria-modal');\n            this._isTransitioning = false;\n            this._showBackdrop(() => {\n                $(document.body).removeClass(ClassName.OPEN);\n                this._resetAdjustments();\n                this._resetScrollbar();\n                $(this._element).trigger(Event.HIDDEN);\n            });\n        }\n        _removeBackdrop() {\n            if (this._backdrop) {\n                $(this._backdrop).remove();\n                this._backdrop = null;\n            }\n        }\n        _showBackdrop(callback) {\n            const animate = $(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';\n            if (this._isShown && this._config.backdrop) {\n                this._backdrop = document.createElement('div');\n                this._backdrop.className = ClassName.BACKDROP;\n                if (animate) {\n                    this._backdrop.classList.add(animate);\n                }\n                $(this._backdrop).appendTo(document.body);\n                $(this._element).on(Event.CLICK_DISMISS, event => {\n                    if (this._ignoreBackdropClick) {\n                        this._ignoreBackdropClick = false;\n                        return;\n                    }\n                    if (event.target !== event.currentTarget) {\n                        return;\n                    }\n                    if (this._config.backdrop === 'static') {\n                        this._element.focus();\n                    } else {\n                        this.hide();\n                    }\n                });\n                if (animate) {\n                    Util.reflow(this._backdrop);\n                }\n                $(this._backdrop).addClass(ClassName.SHOW);\n                if (!callback) {\n                    return;\n                }\n                if (!animate) {\n                    callback();\n                    return;\n                }\n                const backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);\n                $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);\n            } else if (!this._isShown && this._backdrop) {\n                $(this._backdrop).removeClass(ClassName.SHOW);\n                const callbackRemove = () => {\n                    this._removeBackdrop();\n                    if (callback) {\n                        callback();\n                    }\n                };\n                if ($(this._element).hasClass(ClassName.FADE)) {\n                    const backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);\n                    $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(backdropTransitionDuration);\n                } else {\n                    callbackRemove();\n                }\n            } else if (callback) {\n                callback();\n            }\n        }\n        _adjustDialog() {\n            const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n            if (!this._isBodyOverflowing && isModalOverflowing) {\n                this._element.style.paddingLeft = `${ this._scrollbarWidth }px`;\n            }\n            if (this._isBodyOverflowing && !isModalOverflowing) {\n                this._element.style.paddingRight = `${ this._scrollbarWidth }px`;\n            }\n        }\n        _resetAdjustments() {\n            this._element.style.paddingLeft = '';\n            this._element.style.paddingRight = '';\n        }\n        _checkScrollbar() {\n            const rect = document.body.getBoundingClientRect();\n            this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;\n            this._scrollbarWidth = this._getScrollbarWidth();\n        }\n        _setScrollbar() {\n            if (this._isBodyOverflowing) {\n                const fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));\n                const stickyContent = [].slice.call(document.querySelectorAll(Selector.STICKY_CONTENT));\n                $(fixedContent).each((index, element) => {\n                    const actualPadding = element.style.paddingRight;\n                    const calculatedPadding = $(element).css('padding-right');\n                    $(element).data('padding-right', actualPadding).css('padding-right', `${ parseFloat(calculatedPadding) + this._scrollbarWidth }px`);\n                });\n                $(stickyContent).each((index, element) => {\n                    const actualMargin = element.style.marginRight;\n                    const calculatedMargin = $(element).css('margin-right');\n                    $(element).data('margin-right', actualMargin).css('margin-right', `${ parseFloat(calculatedMargin) - this._scrollbarWidth }px`);\n                });\n                const actualPadding = document.body.style.paddingRight;\n                const calculatedPadding = $(document.body).css('padding-right');\n                $(document.body).data('padding-right', actualPadding).css('padding-right', `${ parseFloat(calculatedPadding) + this._scrollbarWidth }px`);\n            }\n            $(document.body).addClass(ClassName.OPEN);\n        }\n        _resetScrollbar() {\n            const fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));\n            $(fixedContent).each((index, element) => {\n                const padding = $(element).data('padding-right');\n                $(element).removeData('padding-right');\n                element.style.paddingRight = padding ? padding : '';\n            });\n            const elements = [].slice.call(document.querySelectorAll(`${ Selector.STICKY_CONTENT }`));\n            $(elements).each((index, element) => {\n                const margin = $(element).data('margin-right');\n                if (typeof margin !== 'undefined') {\n                    $(element).css('margin-right', margin).removeData('margin-right');\n                }\n            });\n            const padding = $(document.body).data('padding-right');\n            $(document.body).removeData('padding-right');\n            document.body.style.paddingRight = padding ? padding : '';\n        }\n        _getScrollbarWidth() {\n            const scrollDiv = document.createElement('div');\n            scrollDiv.className = ClassName.SCROLLBAR_MEASURER;\n            document.body.appendChild(scrollDiv);\n            const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n            document.body.removeChild(scrollDiv);\n            return scrollbarWidth;\n        }\n        static _jqueryInterface(config, relatedTarget) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                //const _config = {\n                //    ...Default,\n                //    ...$this.data(),\n                //    ...typeof config === 'object' && config ? config : {}\n                //};\n                const _config = langx.mixin({},Default,$this.data(),typeof config === 'object' && config ? config : {});\n                if (!data) {\n                    data = new Modal(this, _config);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config](relatedTarget);\n                } else if (_config.show) {\n                    data.show(relatedTarget);\n                }\n            });\n        }\n    }\n    $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n        let target;\n        const selector = Util.getSelectorFromElement(this);\n        if (selector) {\n            target = document.querySelector(selector);\n        }\n        //const config = $(target).data(DATA_KEY) ? 'toggle' : {\n        //    ...$(target).data(),\n        //    ...$(this).data()\n        //};\n        const config = $(target).data(DATA_KEY) ? 'toggle' : langx.mixin({},$(target).data(),$(this).data());\n        if (this.tagName === 'A' || this.tagName === 'AREA') {\n            event.preventDefault();\n        }\n        const $target = $(target).one(Event.SHOW, showEvent => {\n            if (showEvent.isDefaultPrevented()) {\n                return;\n            }\n            $target.one(Event.HIDDEN, () => {\n                if ($(this).is(':visible')) {\n                    this.focus();\n                }\n            });\n        });\n        Modal._jqueryInterface.call($(target), config, this);\n    });\n    $.fn[NAME] = Modal._jqueryInterface;\n    $.fn[NAME].Constructor = Modal;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Modal._jqueryInterface;\n    };\n    return Modal;\n});\ndefine('skylark-bootstrap4/tooltip',[\n    'skylark-langx/langx',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/eventer',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    'skylark-popper/Popper',\n    './util'\n], function (langx,$, eventer,plugins,bs4,Popper,Util) {\n    'use strict';\n    const NAME = 'tooltip';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.tooltip';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const CLASS_PREFIX = 'bs-tooltip';\n    const BSCLS_PREFIX_REGEX = new RegExp(`(^|\\\\s)${ CLASS_PREFIX }\\\\S+`, 'g');\n    const DefaultType = {\n        animation: 'boolean',\n        template: 'string',\n        title: '(string|element|function)',\n        trigger: 'string',\n        delay: '(number|object)',\n        html: 'boolean',\n        selector: '(string|boolean)',\n        placement: '(string|function)',\n        offset: '(number|string)',\n        container: '(string|element|boolean)',\n        fallbackPlacement: '(string|array)',\n        boundary: '(string|element)'\n    };\n    const AttachmentMap = {\n        AUTO: 'auto',\n        TOP: 'top',\n        RIGHT: 'right',\n        BOTTOM: 'bottom',\n        LEFT: 'left'\n    };\n    const Default = {\n        animation: true,\n        template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<div class=\"tooltip-inner\"></div></div>',\n        trigger: 'hover focus',\n        title: '',\n        delay: 0,\n        html: false,\n        selector: false,\n        placement: 'top',\n        offset: 0,\n        container: false,\n        fallbackPlacement: 'flip',\n        boundary: 'scrollParent'\n    };\n    const HoverState = {\n        SHOW: 'show',\n        OUT: 'out'\n    };\n    const Event = {\n        HIDE: `hide${ EVENT_KEY }`,\n        HIDDEN: `hidden${ EVENT_KEY }`,\n        SHOW: `show${ EVENT_KEY }`,\n        SHOWN: `shown${ EVENT_KEY }`,\n        INSERTED: `inserted${ EVENT_KEY }`,\n        CLICK: `click${ EVENT_KEY }`,\n        FOCUSIN: `focusin${ EVENT_KEY }`,\n        FOCUSOUT: `focusout${ EVENT_KEY }`,\n        MOUSEENTER: `mouseenter${ EVENT_KEY }`,\n        MOUSELEAVE: `mouseleave${ EVENT_KEY }`\n    };\n    const ClassName = {\n        FADE: 'fade',\n        SHOW: 'show'\n    };\n    const Selector = {\n        TOOLTIP: '.tooltip',\n        TOOLTIP_INNER: '.tooltip-inner',\n        ARROW: '.arrow'\n    };\n    const Trigger = {\n        HOVER: 'hover',\n        FOCUS: 'focus',\n        CLICK: 'click',\n        MANUAL: 'manual'\n    };\n    class Tooltip {\n        constructor(element, config) {\n            if (typeof Popper === 'undefined') {\n                throw new TypeError(\"Bootstrap's tooltips require skylark-popper/Popper (https://skylark-popper/Popper.org/)\");\n            }\n            this._isEnabled = true;\n            this._timeout = 0;\n            this._hoverState = '';\n            this._activeTrigger = {};\n            this._popper = null;\n            this.element = element;\n            this.config = this._getConfig(config);\n            this.tip = null;\n            this._setListeners();\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        static get NAME() {\n            return NAME;\n        }\n        static get DATA_KEY() {\n            return DATA_KEY;\n        }\n        static get Event() {\n            return Event;\n        }\n        static get EVENT_KEY() {\n            return EVENT_KEY;\n        }\n        static get DefaultType() {\n            return DefaultType;\n        }\n        enable() {\n            this._isEnabled = true;\n        }\n        disable() {\n            this._isEnabled = false;\n        }\n        toggleEnabled() {\n            this._isEnabled = !this._isEnabled;\n        }\n        toggle(event) {\n            if (!this._isEnabled) {\n                return;\n            }\n            if (event) {\n                const dataKey = this.constructor.DATA_KEY;\n                let context = $(event.currentTarget).data(dataKey);\n                if (!context) {\n                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n                    $(event.currentTarget).data(dataKey, context);\n                }\n                context._activeTrigger.click = !context._activeTrigger.click;\n                if (context._isWithActiveTrigger()) {\n                    context._enter(null, context);\n                } else {\n                    context._leave(null, context);\n                }\n            } else {\n                if ($(this.getTipElement()).hasClass(ClassName.SHOW)) {\n                    this._leave(null, this);\n                    return;\n                }\n                this._enter(null, this);\n            }\n        }\n        dispose() {\n            clearTimeout(this._timeout);\n            $.removeData(this.element, this.constructor.DATA_KEY);\n            $(this.element).off(this.constructor.EVENT_KEY);\n            $(this.element).closest('.modal').off('hide.bs.modal');\n            if (this.tip) {\n                $(this.tip).remove();\n            }\n            this._isEnabled = null;\n            this._timeout = null;\n            this._hoverState = null;\n            this._activeTrigger = null;\n            if (this._popper !== null) {\n                this._popper.destroy();\n            }\n            this._popper = null;\n            this.element = null;\n            this.config = null;\n            this.tip = null;\n        }\n        show() {\n            if ($(this.element).css('display') === 'none') {\n                throw new Error('Please use show on visible elements');\n            }\n            const showEvent = eventer.create(this.constructor.Event.SHOW);\n            if (this.isWithContent() && this._isEnabled) {\n                $(this.element).trigger(showEvent);\n                const shadowRoot = Util.findShadowRoot(this.element);\n                const isInTheDom = $.contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);\n                if (showEvent.isDefaultPrevented() || !isInTheDom) {\n                    return;\n                }\n                const tip = this.getTipElement();\n                const tipId = Util.getUID(this.constructor.NAME);\n                tip.setAttribute('id', tipId);\n                this.element.setAttribute('aria-describedby', tipId);\n                this.setContent();\n                if (this.config.animation) {\n                    $(tip).addClass(ClassName.FADE);\n                }\n                const placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;\n                const attachment = this._getAttachment(placement);\n                this.addAttachmentClass(attachment);\n                const container = this._getContainer();\n                $(tip).data(this.constructor.DATA_KEY, this);\n                if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {\n                    $(tip).appendTo(container);\n                }\n                $(this.element).trigger(this.constructor.Event.INSERTED);\n                this._popper = new Popper(this.element, tip, {\n                    placement: attachment,\n                    modifiers: {\n                        offset: { offset: this.config.offset },\n                        flip: { behavior: this.config.fallbackPlacement },\n                        arrow: { element: Selector.ARROW },\n                        preventOverflow: { boundariesElement: this.config.boundary }\n                    },\n                    onCreate: data => {\n                        if (data.originalPlacement !== data.placement) {\n                            this._handlePopperPlacementChange(data);\n                        }\n                    },\n                    onUpdate: data => this._handlePopperPlacementChange(data)\n                });\n                $(tip).addClass(ClassName.SHOW);\n                if ('ontouchstart' in document.documentElement) {\n                    $(document.body).children().on('mouseover', null, $.noop);\n                }\n                const complete = () => {\n                    if (this.config.animation) {\n                        this._fixTransition();\n                    }\n                    const prevHoverState = this._hoverState;\n                    this._hoverState = null;\n                    $(this.element).trigger(this.constructor.Event.SHOWN);\n                    if (prevHoverState === HoverState.OUT) {\n                        this._leave(null, this);\n                    }\n                };\n                if ($(this.tip).hasClass(ClassName.FADE)) {\n                    const transitionDuration = Util.getTransitionDurationFromElement(this.tip);\n                    $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n                } else {\n                    complete();\n                }\n            }\n        }\n        hide(callback) {\n            const tip = this.getTipElement();\n            const hideEvent = eventer.create(this.constructor.Event.HIDE);\n            const complete = () => {\n                if (this._hoverState !== HoverState.SHOW && tip.parentNode) {\n                    tip.parentNode.removeChild(tip);\n                }\n                this._cleanTipClass();\n                this.element.removeAttribute('aria-describedby');\n                $(this.element).trigger(this.constructor.Event.HIDDEN);\n                if (this._popper !== null) {\n                    this._popper.destroy();\n                }\n                if (callback) {\n                    callback();\n                }\n            };\n            $(this.element).trigger(hideEvent);\n            if (hideEvent.isDefaultPrevented()) {\n                return;\n            }\n            $(tip).removeClass(ClassName.SHOW);\n            if ('ontouchstart' in document.documentElement) {\n                $(document.body).children().off('mouseover', null, $.noop);\n            }\n            this._activeTrigger[Trigger.CLICK] = false;\n            this._activeTrigger[Trigger.FOCUS] = false;\n            this._activeTrigger[Trigger.HOVER] = false;\n            if ($(this.tip).hasClass(ClassName.FADE)) {\n                const transitionDuration = Util.getTransitionDurationFromElement(tip);\n                $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n            } else {\n                complete();\n            }\n            this._hoverState = '';\n        }\n        update() {\n            if (this._popper !== null) {\n                this._popper.scheduleUpdate();\n            }\n        }\n        isWithContent() {\n            return Boolean(this.getTitle());\n        }\n        addAttachmentClass(attachment) {\n            $(this.getTipElement()).addClass(`${ CLASS_PREFIX }-${ attachment }`);\n        }\n        getTipElement() {\n            this.tip = this.tip || $(this.config.template)[0];\n            return this.tip;\n        }\n        setContent() {\n            const tip = this.getTipElement();\n            this.setElementContent($(tip.querySelectorAll(Selector.TOOLTIP_INNER)), this.getTitle());\n            $(tip).removeClass(`${ ClassName.FADE } ${ ClassName.SHOW }`);\n        }\n        setElementContent($element, content) {\n            const html = this.config.html;\n            if (typeof content === 'object' && (content.nodeType || content.skylark-utils-dom/query)) {\n                if (html) {\n                    if (!$(content).parent().is($element)) {\n                        $element.empty().append(content);\n                    }\n                } else {\n                    $element.text($(content).text());\n                }\n            } else {\n                $element[html ? 'html' : 'text'](content);\n            }\n        }\n        getTitle() {\n            let title = this.element.getAttribute('data-original-title');\n            if (!title) {\n                title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;\n            }\n            return title;\n        }\n        _getContainer() {\n            if (this.config.container === false) {\n                return document.body;\n            }\n            if (Util.isElement(this.config.container)) {\n                return $(this.config.container);\n            }\n            return $(document).find(this.config.container);\n        }\n        _getAttachment(placement) {\n            return AttachmentMap[placement.toUpperCase()];\n        }\n        _setListeners() {\n            const triggers = this.config.trigger.split(' ');\n            triggers.forEach(trigger => {\n                if (trigger === 'click') {\n                    $(this.element).on(this.constructor.Event.CLICK, this.config.selector, event => this.toggle(event));\n                } else if (trigger !== Trigger.MANUAL) {\n                    const eventIn = trigger === Trigger.HOVER ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN;\n                    const eventOut = trigger === Trigger.HOVER ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n                    $(this.element).on(eventIn, this.config.selector, event => this._enter(event)).on(eventOut, this.config.selector, event => this._leave(event));\n                }\n            });\n            $(this.element).closest('.modal').on('hide.bs.modal', () => {\n                if (this.element) {\n                    this.hide();\n                }\n            });\n            if (this.config.selector) {\n                //this.config = {\n                //    ...this.config,\n                //    trigger: 'manual',\n                //    selector: ''\n                //};\n                langx.mixin(this.config,{\n                    trigger: 'manual',\n                    selector: ''\n                });\n            } else {\n                this._fixTitle();\n            }\n        }\n        _fixTitle() {\n            const titleType = typeof this.element.getAttribute('data-original-title');\n            if (this.element.getAttribute('title') || titleType !== 'string') {\n                this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');\n                this.element.setAttribute('title', '');\n            }\n        }\n        _enter(event, context) {\n            const dataKey = this.constructor.DATA_KEY;\n            context = context || $(event.currentTarget).data(dataKey);\n            if (!context) {\n                context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n                $(event.currentTarget).data(dataKey, context);\n            }\n            if (event) {\n                context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;\n            }\n            if ($(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {\n                context._hoverState = HoverState.SHOW;\n                return;\n            }\n            clearTimeout(context._timeout);\n            context._hoverState = HoverState.SHOW;\n            if (!context.config.delay || !context.config.delay.show) {\n                context.show();\n                return;\n            }\n            context._timeout = setTimeout(() => {\n                if (context._hoverState === HoverState.SHOW) {\n                    context.show();\n                }\n            }, context.config.delay.show);\n        }\n        _leave(event, context) {\n            const dataKey = this.constructor.DATA_KEY;\n            context = context || $(event.currentTarget).data(dataKey);\n            if (!context) {\n                context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n                $(event.currentTarget).data(dataKey, context);\n            }\n            if (event) {\n                context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;\n            }\n            if (context._isWithActiveTrigger()) {\n                return;\n            }\n            clearTimeout(context._timeout);\n            context._hoverState = HoverState.OUT;\n            if (!context.config.delay || !context.config.delay.hide) {\n                context.hide();\n                return;\n            }\n            context._timeout = setTimeout(() => {\n                if (context._hoverState === HoverState.OUT) {\n                    context.hide();\n                }\n            }, context.config.delay.hide);\n        }\n        _isWithActiveTrigger() {\n            for (const trigger in this._activeTrigger) {\n                if (this._activeTrigger[trigger]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        _getConfig(config) {\n            //config = {\n            //    ...this.constructor.Default,\n            //    ...$(this.element).data(),\n            //    ...typeof config === 'object' && config ? config : {}\n            //};\n            config = langx.mixin({},this.constructor.Default,$(this.element).data(),config);\n            if (typeof config.delay === 'number') {\n                config.delay = {\n                    show: config.delay,\n                    hide: config.delay\n                };\n            }\n            if (typeof config.title === 'number') {\n                config.title = config.title.toString();\n            }\n            if (typeof config.content === 'number') {\n                config.content = config.content.toString();\n            }\n            Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\n            return config;\n        }\n        _getDelegateConfig() {\n            const config = {};\n            if (this.config) {\n                for (const key in this.config) {\n                    if (this.constructor.Default[key] !== this.config[key]) {\n                        config[key] = this.config[key];\n                    }\n                }\n            }\n            return config;\n        }\n        _cleanTipClass() {\n            const $tip = $(this.getTipElement());\n            const tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\n            if (tabClass !== null && tabClass.length) {\n                $tip.removeClass(tabClass.join(''));\n            }\n        }\n        _handlePopperPlacementChange(popperData) {\n            const popperInstance = popperData.instance;\n            this.tip = popperInstance.popper;\n            this._cleanTipClass();\n            this.addAttachmentClass(this._getAttachment(popperData.placement));\n        }\n        _fixTransition() {\n            const tip = this.getTipElement();\n            const initConfigAnimation = this.config.animation;\n            if (tip.getAttribute('x-placement') !== null) {\n                return;\n            }\n            $(tip).removeClass(ClassName.FADE);\n            this.config.animation = false;\n            this.hide();\n            this.show();\n            this.config.animation = initConfigAnimation;\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                const _config = typeof config === 'object' && config;\n                if (!data && /dispose|hide/.test(config)) {\n                    return;\n                }\n                if (!data) {\n                    data = new Tooltip(this, _config);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    $.fn[NAME] = Tooltip._jqueryInterface;\n    $.fn[NAME].Constructor = Tooltip;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Tooltip._jqueryInterface;\n    };\n    return Tooltip;\n});\ndefine('skylark-bootstrap4/popover',[\n    'skylark-utils-dom/langx',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './tooltip'\n], function (langx,$, plugins,bs4,Tooltip) {\n    \n    'use strict';\n    const NAME = 'popover';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.popover';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const CLASS_PREFIX = 'bs-popover';\n    const BSCLS_PREFIX_REGEX = new RegExp(`(^|\\\\s)${ CLASS_PREFIX }\\\\S+`, 'g');\n    //const Default = {\n    //    ...Tooltip.Default,\n    //    placement: 'right',\n    //    trigger: 'click',\n    //    content: '',\n    //    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n    //};\n    //const DefaultType = {\n    //    ...Tooltip.DefaultType,\n    //    content: '(string|element|function)'\n    //};\n    const Default = langx.mixin(\n        {},\n        Tooltip.Default,\n        {\n            placement: 'right',\n            trigger: 'click',\n            content: '',\n            template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n        }\n    );\n    const DefaultType = langx.mixin(\n        {},  \n        Tooltip.DefaultType,\n        {\n            content: '(string|element|function)'\n        }\n    );\n    const ClassName = {\n        FADE: 'fade',\n        SHOW: 'show'\n    };\n    const Selector = {\n        TITLE: '.popover-header',\n        CONTENT: '.popover-body'\n    };\n    const Event = {\n        HIDE: `hide${ EVENT_KEY }`,\n        HIDDEN: `hidden${ EVENT_KEY }`,\n        SHOW: `show${ EVENT_KEY }`,\n        SHOWN: `shown${ EVENT_KEY }`,\n        INSERTED: `inserted${ EVENT_KEY }`,\n        CLICK: `click${ EVENT_KEY }`,\n        FOCUSIN: `focusin${ EVENT_KEY }`,\n        FOCUSOUT: `focusout${ EVENT_KEY }`,\n        MOUSEENTER: `mouseenter${ EVENT_KEY }`,\n        MOUSELEAVE: `mouseleave${ EVENT_KEY }`\n    };\n    class Popover extends Tooltip {\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        static get NAME() {\n            return NAME;\n        }\n        static get DATA_KEY() {\n            return DATA_KEY;\n        }\n        static get Event() {\n            return Event;\n        }\n        static get EVENT_KEY() {\n            return EVENT_KEY;\n        }\n        static get DefaultType() {\n            return DefaultType;\n        }\n        isWithContent() {\n            return this.getTitle() || this._getContent();\n        }\n        addAttachmentClass(attachment) {\n            $(this.getTipElement()).addClass(`${ CLASS_PREFIX }-${ attachment }`);\n        }\n        getTipElement() {\n            this.tip = this.tip || $(this.config.template)[0];\n            return this.tip;\n        }\n        setContent() {\n            const $tip = $(this.getTipElement());\n            this.setElementContent($tip.find(Selector.TITLE), this.getTitle());\n            let content = this._getContent();\n            if (typeof content === 'function') {\n                content = content.call(this.element);\n            }\n            this.setElementContent($tip.find(Selector.CONTENT), content);\n            $tip.removeClass(`${ ClassName.FADE } ${ ClassName.SHOW }`);\n        }\n        _getContent() {\n            return this.element.getAttribute('data-content') || this.config.content;\n        }\n        _cleanTipClass() {\n            const $tip = $(this.getTipElement());\n            const tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\n            if (tabClass !== null && tabClass.length > 0) {\n                $tip.removeClass(tabClass.join(''));\n            }\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                const _config = typeof config === 'object' ? config : null;\n                if (!data && /dispose|hide/.test(config)) {\n                    return;\n                }\n                if (!data) {\n                    data = new Popover(this, _config);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    $.fn[NAME] = Popover._jqueryInterface;\n    $.fn[NAME].Constructor = Popover;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Popover._jqueryInterface;\n    };\n    return Popover;\n});\ndefine('skylark-bootstrap4/scrollspy',[\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './util'\n], function ($, plugins,bs4,Util) {\n\n    'use strict';\n    const NAME = 'scrollspy';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.scrollspy';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const Default = {\n        offset: 10,\n        method: 'auto',\n        target: ''\n    };\n    const DefaultType = {\n        offset: 'number',\n        method: 'string',\n        target: '(string|element)'\n    };\n    const Event = {\n        ACTIVATE: `activate${ EVENT_KEY }`,\n        SCROLL: `scroll${ EVENT_KEY }`,\n        LOAD_DATA_API: `load${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    const ClassName = {\n        DROPDOWN_ITEM: 'dropdown-item',\n        DROPDOWN_MENU: 'dropdown-menu',\n        ACTIVE: 'active'\n    };\n    const Selector = {\n        DATA_SPY: '[data-spy=\"scroll\"]',\n        ACTIVE: '.active',\n        NAV_LIST_GROUP: '.nav, .list-group',\n        NAV_LINKS: '.nav-link',\n        NAV_ITEMS: '.nav-item',\n        LIST_ITEMS: '.list-group-item',\n        DROPDOWN: '.dropdown',\n        DROPDOWN_ITEMS: '.dropdown-item',\n        DROPDOWN_TOGGLE: '.dropdown-toggle'\n    };\n    const OffsetMethod = {\n        OFFSET: 'offset',\n        POSITION: 'position'\n    };\n    class ScrollSpy {\n        constructor(element, config) {\n            this._element = element;\n            this._scrollElement = element.tagName === 'BODY' ? window : element;\n            this._config = this._getConfig(config);\n            this._selector = `${ this._config.target } ${ Selector.NAV_LINKS },` + `${ this._config.target } ${ Selector.LIST_ITEMS },` + `${ this._config.target } ${ Selector.DROPDOWN_ITEMS }`;\n            this._offsets = [];\n            this._targets = [];\n            this._activeTarget = null;\n            this._scrollHeight = 0;\n            $(this._scrollElement).on(Event.SCROLL, event => this._process(event));\n            this.refresh();\n            this._process();\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        refresh() {\n            const autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;\n            const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n            const offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;\n            this._offsets = [];\n            this._targets = [];\n            this._scrollHeight = this._getScrollHeight();\n            const targets = [].slice.call(document.querySelectorAll(this._selector));\n            targets.map(element => {\n                let target;\n                const targetSelector = Util.getSelectorFromElement(element);\n                if (targetSelector) {\n                    target = document.querySelector(targetSelector);\n                }\n                if (target) {\n                    const targetBCR = target.getBoundingClientRect();\n                    if (targetBCR.width || targetBCR.height) {\n                        return [\n                            $(target)[offsetMethod]().top + offsetBase,\n                            targetSelector\n                        ];\n                    }\n                }\n                return null;\n            }).filter(item => item).sort((a, b) => a[0] - b[0]).forEach(item => {\n                this._offsets.push(item[0]);\n                this._targets.push(item[1]);\n            });\n        }\n        dispose() {\n            $.removeData(this._element, DATA_KEY);\n            $(this._scrollElement).off(EVENT_KEY);\n            this._element = null;\n            this._scrollElement = null;\n            this._config = null;\n            this._selector = null;\n            this._offsets = null;\n            this._targets = null;\n            this._activeTarget = null;\n            this._scrollHeight = null;\n        }\n        _getConfig(config) {\n            //config = {\n            //    ...Default,\n            //    ...typeof config === 'object' && config ? config : {}\n            //};\n            config = langx.mixin({},Default,typeof config === 'object' && config ? config : {});\n            if (typeof config.target !== 'string') {\n                let id = $(config.target).attr('id');\n                if (!id) {\n                    id = Util.getUID(NAME);\n                    $(config.target).attr('id', id);\n                }\n                config.target = `#${ id }`;\n            }\n            Util.typeCheckConfig(NAME, config, DefaultType);\n            return config;\n        }\n        _getScrollTop() {\n            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n        }\n        _getScrollHeight() {\n            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n        }\n        _getOffsetHeight() {\n            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n        }\n        _process() {\n            const scrollTop = this._getScrollTop() + this._config.offset;\n            const scrollHeight = this._getScrollHeight();\n            const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n            if (this._scrollHeight !== scrollHeight) {\n                this.refresh();\n            }\n            if (scrollTop >= maxScroll) {\n                const target = this._targets[this._targets.length - 1];\n                if (this._activeTarget !== target) {\n                    this._activate(target);\n                }\n                return;\n            }\n            if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n                this._activeTarget = null;\n                this._clear();\n                return;\n            }\n            const offsetLength = this._offsets.length;\n            for (let i = offsetLength; i--;) {\n                const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n                if (isActiveTarget) {\n                    this._activate(this._targets[i]);\n                }\n            }\n        }\n        _activate(target) {\n            this._activeTarget = target;\n            this._clear();\n            const queries = this._selector.split(',').map(selector => `${ selector }[data-target=\"${ target }\"],${ selector }[href=\"${ target }\"]`);\n            const $link = $([].slice.call(document.querySelectorAll(queries.join(','))));\n            if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {\n                $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);\n                $link.addClass(ClassName.ACTIVE);\n            } else {\n                $link.addClass(ClassName.ACTIVE);\n                $link.parents(Selector.NAV_LIST_GROUP).prev(`${ Selector.NAV_LINKS }, ${ Selector.LIST_ITEMS }`).addClass(ClassName.ACTIVE);\n                $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);\n            }\n            $(this._scrollElement).trigger(Event.ACTIVATE, { relatedTarget: target });\n        }\n        _clear() {\n            [].slice.call(document.querySelectorAll(this._selector)).filter(node => node.classList.contains(ClassName.ACTIVE)).forEach(node => node.classList.remove(ClassName.ACTIVE));\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                const _config = typeof config === 'object' && config;\n                if (!data) {\n                    data = new ScrollSpy(this, _config);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    $(window).on(Event.LOAD_DATA_API, () => {\n        const scrollSpys = [].slice.call(document.querySelectorAll(Selector.DATA_SPY));\n        const scrollSpysLength = scrollSpys.length;\n        for (let i = scrollSpysLength; i--;) {\n            const $spy = $(scrollSpys[i]);\n            ScrollSpy._jqueryInterface.call($spy, $spy.data());\n        }\n    });\n    $.fn[NAME] = ScrollSpy._jqueryInterface;\n    $.fn[NAME].Constructor = ScrollSpy;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return ScrollSpy._jqueryInterface;\n    };\n    return ScrollSpy;\n});\ndefine('skylark-bootstrap4/tab',[\n    'skylark-langx/langx',\n    'skylark-utils-dom/eventer',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './util'\n], function (langx,eventer,$, plugins,bs4,Util) {\n\n    'use strict';\n    const NAME = 'tab';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.tab';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const Event = {\n        HIDE: `hide${ EVENT_KEY }`,\n        HIDDEN: `hidden${ EVENT_KEY }`,\n        SHOW: `show${ EVENT_KEY }`,\n        SHOWN: `shown${ EVENT_KEY }`,\n        CLICK_DATA_API: `click${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    const ClassName = {\n        DROPDOWN_MENU: 'dropdown-menu',\n        ACTIVE: 'active',\n        DISABLED: 'disabled',\n        FADE: 'fade',\n        SHOW: 'show'\n    };\n    const Selector = {\n        DROPDOWN: '.dropdown',\n        NAV_LIST_GROUP: '.nav, .list-group',\n        ACTIVE: '.active',\n        ACTIVE_UL: '> li > .active',\n        DATA_TOGGLE: '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]',\n        DROPDOWN_TOGGLE: '.dropdown-toggle',\n        DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'\n    };\n    class Tab {\n        constructor(element) {\n            this._element = element;\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        show() {\n            if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName.ACTIVE) || $(this._element).hasClass(ClassName.DISABLED)) {\n                return;\n            }\n            let target;\n            let previous;\n            const listElement = $(this._element).closest(Selector.NAV_LIST_GROUP)[0];\n            const selector = Util.getSelectorFromElement(this._element);\n            if (listElement) {\n                const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? Selector.ACTIVE_UL : Selector.ACTIVE;\n                previous = langx.makeArray($(listElement).find(itemSelector));\n                previous = previous[previous.length - 1];\n            }\n            const hideEvent = eventer.create(Event.HIDE, { relatedTarget: this._element });\n            const showEvent = eventer.create(Event.SHOW, { relatedTarget: previous });\n            if (previous) {\n                $(previous).trigger(hideEvent);\n            }\n            $(this._element).trigger(showEvent);\n            if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {\n                return;\n            }\n            if (selector) {\n                target = document.querySelector(selector);\n            }\n            this._activate(this._element, listElement);\n            const complete = () => {\n                const hiddenEvent = eventer.create(Event.HIDDEN, { relatedTarget: this._element });\n                const shownEvent = eventer.create(Event.SHOWN, { relatedTarget: previous });\n                $(previous).trigger(hiddenEvent);\n                $(this._element).trigger(shownEvent);\n            };\n            if (target) {\n                this._activate(target, target.parentNode, complete);\n            } else {\n                complete();\n            }\n        }\n        dispose() {\n            $.removeData(this._element, DATA_KEY);\n            this._element = null;\n        }\n        _activate(element, container, callback) {\n            const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $(container).find(Selector.ACTIVE_UL) : $(container).children(Selector.ACTIVE);\n            const active = activeElements[0];\n            const isTransitioning = callback && (active && $(active).hasClass(ClassName.FADE));\n            const complete = () => this._transitionComplete(element, active, callback);\n            if (active && isTransitioning) {\n                const transitionDuration = Util.getTransitionDurationFromElement(active);\n                $(active).removeClass(ClassName.SHOW).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n            } else {\n                complete();\n            }\n        }\n        _transitionComplete(element, active, callback) {\n            if (active) {\n                $(active).removeClass(ClassName.ACTIVE);\n                const dropdownChild = $(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];\n                if (dropdownChild) {\n                    $(dropdownChild).removeClass(ClassName.ACTIVE);\n                }\n                if (active.getAttribute('role') === 'tab') {\n                    active.setAttribute('aria-selected', false);\n                }\n            }\n            $(element).addClass(ClassName.ACTIVE);\n            if (element.getAttribute('role') === 'tab') {\n                element.setAttribute('aria-selected', true);\n            }\n            Util.reflow(element);\n            $(element).addClass(ClassName.SHOW);\n            if (element.parentNode && $(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {\n                const dropdownElement = $(element).closest(Selector.DROPDOWN)[0];\n                if (dropdownElement) {\n                    const dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector.DROPDOWN_TOGGLE));\n                    $(dropdownToggleList).addClass(ClassName.ACTIVE);\n                }\n                element.setAttribute('aria-expanded', true);\n            }\n            if (callback) {\n                callback();\n            }\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                const $this = $(this);\n                let data = $this.data(DATA_KEY);\n                if (!data) {\n                    data = new Tab(this);\n                    $this.data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n        event.preventDefault();\n        Tab._jqueryInterface.call($(this), 'show');\n    });\n    $.fn[NAME] = Tab._jqueryInterface;\n    $.fn[NAME].Constructor = Tab;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Tab._jqueryInterface;\n    };\n    return Tab;\n});\ndefine('skylark-bootstrap4/toast',[\n    'skylark-langx/langx',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './util'\n], function (langx,$, plugins,bs4,Util) {\n\n    'use strict';\n    const NAME = 'toast';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.toast';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const Event = {\n        CLICK_DISMISS: `click.dismiss${ EVENT_KEY }`,\n        HIDE: `hide${ EVENT_KEY }`,\n        HIDDEN: `hidden${ EVENT_KEY }`,\n        SHOW: `show${ EVENT_KEY }`,\n        SHOWN: `shown${ EVENT_KEY }`\n    };\n    const ClassName = {\n        FADE: 'fade',\n        HIDE: 'hide',\n        SHOW: 'show',\n        SHOWING: 'showing'\n    };\n    const DefaultType = {\n        animation: 'boolean',\n        autohide: 'boolean',\n        delay: 'number'\n    };\n    const Default = {\n        animation: true,\n        autohide: true,\n        delay: 500\n    };\n    const Selector = { DATA_DISMISS: '[data-dismiss=\"toast\"]' };\n    class Toast {\n        constructor(element, config) {\n            this._element = element;\n            this._config = this._getConfig(config);\n            this._timeout = null;\n            this._setListeners();\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get DefaultType() {\n            return DefaultType;\n        }\n        show() {\n            $(this._element).trigger(Event.SHOW);\n            if (this._config.animation) {\n                this._element.classList.add(ClassName.FADE);\n            }\n            const complete = () => {\n                this._element.classList.remove(ClassName.SHOWING);\n                this._element.classList.add(ClassName.SHOW);\n                $(this._element).trigger(Event.SHOWN);\n                if (this._config.autohide) {\n                    this.hide();\n                }\n            };\n            this._element.classList.remove(ClassName.HIDE);\n            this._element.classList.add(ClassName.SHOWING);\n            if (this._config.animation) {\n                const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n                $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n            } else {\n                complete();\n            }\n        }\n        hide(withoutTimeout) {\n            if (!this._element.classList.contains(ClassName.SHOW)) {\n                return;\n            }\n            $(this._element).trigger(Event.HIDE);\n            if (withoutTimeout) {\n                this._close();\n            } else {\n                this._timeout = setTimeout(() => {\n                    this._close();\n                }, this._config.delay);\n            }\n        }\n        dispose() {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n            if (this._element.classList.contains(ClassName.SHOW)) {\n                this._element.classList.remove(ClassName.SHOW);\n            }\n            $(this._element).off(Event.CLICK_DISMISS);\n            $.removeData(this._element, DATA_KEY);\n            this._element = null;\n            this._config = null;\n        }\n        _getConfig(config) {\n            //config = {\n            //    ...Default,\n            //    ...$(this._element).data(),\n            //    ...typeof config === 'object' && config ? config : {}\n            //};\n            const _config = langx.mixin({},Default,$(this._element).data(),typeof config === 'object' && config ? config : {});\n            Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\n            return config;\n        }\n        _setListeners() {\n            $(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, () => this.hide(true));\n        }\n        _close() {\n            const complete = () => {\n                this._element.classList.add(ClassName.HIDE);\n                $(this._element).trigger(Event.HIDDEN);\n            };\n            this._element.classList.remove(ClassName.SHOW);\n            if (this._config.animation) {\n                const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n                $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n            } else {\n                complete();\n            }\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                const $element = $(this);\n                let data = $element.data(DATA_KEY);\n                const _config = typeof config === 'object' && config;\n                if (!data) {\n                    data = new Toast(this, _config);\n                    $element.data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config](this);\n                }\n            });\n        }\n    }\n    $.fn[NAME] = Toast._jqueryInterface;\n    $.fn[NAME].Constructor = Toast;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Toast._jqueryInterface;\n    };\n    return Toast;\n});\ndefine('skylark-bootstrap4/main',[\n    \"skylark-utils-dom/query\",\n    './alert',\n    './button',\n    './carousel',\n    './collapse',\n    './dropdown',\n    './modal',\n    './popover',\n    './scrollspy',\n    './tab',\n    './toast',\n    './tooltip',\n    './util'\n], function($) {\n    return $;\n});\ndefine('skylark-bootstrap4', ['skylark-bootstrap4/main'], function (main) { return main; });\n\n"]}
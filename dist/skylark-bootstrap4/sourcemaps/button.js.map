{"version":3,"sources":["button.js"],"names":["define","$","plugins","bs4","NAME","VERSION","DATA_KEY","EVENT_KEY","jquery_NO_CONFLICT","fn","ClassName","ACTIVE","BUTTON","FOCUS","Selector","DATA_TOGGLE_CARROT","DATA_TOGGLE","INPUT","Event","CLICK_DATA_API","FOCUS_BLUR_DATA_API","Button","[object Object]","element","this","_element","triggerChangeEvent","addAriaPressed","rootElement","closest","input","querySelector","type","checked","classList","contains","activeElement","removeClass","hasAttribute","trigger","focus","setAttribute","toggleClass","removeData","config","each","data","document","on","event","preventDefault","button","target","hasClass","_jqueryInterface","call","test","Constructor","noConflict"],"mappings":";;;;;;;AAAAA,QACI,0BACA,4BACA,SACD,SAAUC,EAAGC,EAAQC,GACpB,aACA,MAAMC,EAAO,SACPC,EAAU,QACVC,EAAW,YACXC,MAAiBD,IAEjBE,EAAqBP,EAAEQ,GAAGL,GAC1BM,GACFC,OAAQ,SACRC,OAAQ,MACRC,MAAO,SAELC,GACFC,mBAAoB,0BACpBC,YAAa,0BACbC,MAAO,6BACPN,OAAQ,UACRC,OAAQ,QAENM,GACFC,uBAAyBZ,aACzBa,4BAA8Bb,qBAAyCA,oBAErEc,EACFC,YAAYC,GACRC,KAAKC,SAAWF,EAEpBlB,qBACI,OAAOA,EAEXiB,SACI,IAAII,GAAqB,EACrBC,GAAiB,EACrB,MAAMC,EAAc3B,EAAEuB,KAAKC,UAAUI,QAAQf,EAASE,aAAa,GACnE,GAAIY,EAAa,CACb,MAAME,EAAQN,KAAKC,SAASM,cAAcjB,EAASG,OACnD,GAAIa,EAAO,CACP,GAAmB,UAAfA,EAAME,KACN,GAAIF,EAAMG,SAAWT,KAAKC,SAASS,UAAUC,SAASzB,EAAUC,QAC5De,GAAqB,MAClB,CACH,MAAMU,EAAgBR,EAAYG,cAAcjB,EAASH,QACrDyB,GACAnC,EAAEmC,GAAeC,YAAY3B,EAAUC,QAInD,GAAIe,EAAoB,CACpB,GAAII,EAAMQ,aAAa,aAAeV,EAAYU,aAAa,aAAeR,EAAMI,UAAUC,SAAS,aAAeP,EAAYM,UAAUC,SAAS,YACjJ,OAEJL,EAAMG,SAAWT,KAAKC,SAASS,UAAUC,SAASzB,EAAUC,QAC5DV,EAAE6B,GAAOS,QAAQ,UAErBT,EAAMU,QACNb,GAAiB,GAGrBA,GACAH,KAAKC,SAASgB,aAAa,gBAAiBjB,KAAKC,SAASS,UAAUC,SAASzB,EAAUC,SAEvFe,GACAzB,EAAEuB,KAAKC,UAAUiB,YAAYhC,EAAUC,QAG/CW,UACIrB,EAAE0C,WAAWnB,KAAKC,SAAUnB,GAC5BkB,KAAKC,SAAW,KAEpBH,wBAAwBsB,GACpB,OAAOpB,KAAKqB,KAAK,WACb,IAAIC,EAAO7C,EAAEuB,MAAMsB,KAAKxC,GACnBwC,IACDA,EAAO,IAAIzB,EAAOG,MAClBvB,EAAEuB,MAAMsB,KAAKxC,EAAUwC,IAEZ,WAAXF,GACAE,EAAKF,QAyBrB,OApBA3C,EAAE8C,UAAUC,GAAG9B,EAAMC,eAAgBL,EAASC,mBAAoBkC,IAC9DA,EAAMC,iBACN,IAAIC,EAASF,EAAMG,OACdnD,EAAEkD,GAAQE,SAAS3C,EAAUE,UAC9BuC,EAASlD,EAAEkD,GAAQtB,QAAQf,EAASF,SAExCS,EAAOiC,iBAAiBC,KAAKtD,EAAEkD,GAAS,YACzCH,GAAG9B,EAAME,oBAAqBN,EAASC,mBAAoBkC,IAC1D,MAAME,EAASlD,EAAEgD,EAAMG,QAAQvB,QAAQf,EAASF,QAAQ,GACxDX,EAAEkD,GAAQT,YAAYhC,EAAUG,MAAO,eAAe2C,KAAKP,EAAMjB,SAGrE/B,EAAEQ,GAAGL,GAAQiB,EAAOiC,iBACpBrD,EAAEQ,GAAGL,GAAMqD,YAAcpC,EACzBpB,EAAEQ,GAAGL,GAAMsD,WAAa,MACpBzD,EAAEQ,GAAGL,GAAQI,EACNa,EAAOiC,mBAIXnD,EAAIkB,OAASA","file":"../button.js","sourcesContent":["define([\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/plugins',\n    \"./bs4\"\n], function ($, plugins,bs4) {\n    'use strict';\n    const NAME = 'button';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.button';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const ClassName = {\n        ACTIVE: 'active',\n        BUTTON: 'btn',\n        FOCUS: 'focus'\n    };\n    const Selector = {\n        DATA_TOGGLE_CARROT: '[data-toggle^=\"button\"]',\n        DATA_TOGGLE: '[data-toggle=\"buttons\"]',\n        INPUT: 'input:not([type=\"hidden\"])',\n        ACTIVE: '.active',\n        BUTTON: '.btn'\n    };\n    const Event = {\n        CLICK_DATA_API: `click${ EVENT_KEY }${ DATA_API_KEY }`,\n        FOCUS_BLUR_DATA_API: `focus${ EVENT_KEY }${ DATA_API_KEY } ` + `blur${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    class Button {\n        constructor(element) {\n            this._element = element;\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        toggle() {\n            let triggerChangeEvent = true;\n            let addAriaPressed = true;\n            const rootElement = $(this._element).closest(Selector.DATA_TOGGLE)[0];\n            if (rootElement) {\n                const input = this._element.querySelector(Selector.INPUT);\n                if (input) {\n                    if (input.type === 'radio') {\n                        if (input.checked && this._element.classList.contains(ClassName.ACTIVE)) {\n                            triggerChangeEvent = false;\n                        } else {\n                            const activeElement = rootElement.querySelector(Selector.ACTIVE);\n                            if (activeElement) {\n                                $(activeElement).removeClass(ClassName.ACTIVE);\n                            }\n                        }\n                    }\n                    if (triggerChangeEvent) {\n                        if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {\n                            return;\n                        }\n                        input.checked = !this._element.classList.contains(ClassName.ACTIVE);\n                        $(input).trigger('change');\n                    }\n                    input.focus();\n                    addAriaPressed = false;\n                }\n            }\n            if (addAriaPressed) {\n                this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName.ACTIVE));\n            }\n            if (triggerChangeEvent) {\n                $(this._element).toggleClass(ClassName.ACTIVE);\n            }\n        }\n        dispose() {\n            $.removeData(this._element, DATA_KEY);\n            this._element = null;\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                if (!data) {\n                    data = new Button(this);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (config === 'toggle') {\n                    data[config]();\n                }\n            });\n        }\n    }\n    $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, event => {\n        event.preventDefault();\n        let button = event.target;\n        if (!$(button).hasClass(ClassName.BUTTON)) {\n            button = $(button).closest(Selector.BUTTON);\n        }\n        Button._jqueryInterface.call($(button), 'toggle');\n    }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, event => {\n        const button = $(event.target).closest(Selector.BUTTON)[0];\n        $(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));\n    });\n\n    $.fn[NAME] = Button._jqueryInterface;\n    $.fn[NAME].Constructor = Button;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Button._jqueryInterface;\n    };\n\n\n    return bs4.Button = Button;\n});"]}
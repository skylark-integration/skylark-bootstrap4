{"version":3,"sources":["scrollspy.js"],"names":["define","$","plugins","bs4","Util","NAME","VERSION","DATA_KEY","EVENT_KEY","jquery_NO_CONFLICT","fn","Default","offset","method","target","DefaultType","Event","ACTIVATE","SCROLL","LOAD_DATA_API","ClassName","DROPDOWN_ITEM","DROPDOWN_MENU","ACTIVE","Selector","DATA_SPY","NAV_LIST_GROUP","NAV_LINKS","NAV_ITEMS","LIST_ITEMS","DROPDOWN","DROPDOWN_ITEMS","DROPDOWN_TOGGLE","OffsetMethod","OFFSET","POSITION","ScrollSpy","[object Object]","element","config","this","_element","_scrollElement","tagName","window","_config","_getConfig","_selector","_offsets","_targets","_activeTarget","_scrollHeight","on","event","_process","refresh","autoMethod","offsetMethod","offsetBase","_getScrollTop","_getScrollHeight","slice","call","document","querySelectorAll","map","targetSelector","getSelectorFromElement","querySelector","targetBCR","getBoundingClientRect","width","height","top","filter","item","sort","a","b","forEach","push","removeData","off","langx","mixin","id","attr","getUID","typeCheckConfig","pageYOffset","scrollTop","scrollHeight","Math","max","body","documentElement","innerHeight","maxScroll","_getOffsetHeight","length","_activate","_clear","i","queries","split","selector","$link","join","hasClass","closest","find","addClass","parents","prev","children","trigger","relatedTarget","node","classList","contains","remove","each","data","TypeError","scrollSpys","$spy","_jqueryInterface","Constructor","noConflict"],"mappings":"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","file":"../scrollspy.js","sourcesContent":["define([\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './util'\n], function ($, plugins,bs4,Util) {\n\n    'use strict';\n    const NAME = 'scrollspy';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.scrollspy';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const DATA_API_KEY = '.data-api';\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const Default = {\n        offset: 10,\n        method: 'auto',\n        target: ''\n    };\n    const DefaultType = {\n        offset: 'number',\n        method: 'string',\n        target: '(string|element)'\n    };\n    const Event = {\n        ACTIVATE: `activate${ EVENT_KEY }`,\n        SCROLL: `scroll${ EVENT_KEY }`,\n        LOAD_DATA_API: `load${ EVENT_KEY }${ DATA_API_KEY }`\n    };\n    const ClassName = {\n        DROPDOWN_ITEM: 'dropdown-item',\n        DROPDOWN_MENU: 'dropdown-menu',\n        ACTIVE: 'active'\n    };\n    const Selector = {\n        DATA_SPY: '[data-spy=\"scroll\"]',\n        ACTIVE: '.active',\n        NAV_LIST_GROUP: '.nav, .list-group',\n        NAV_LINKS: '.nav-link',\n        NAV_ITEMS: '.nav-item',\n        LIST_ITEMS: '.list-group-item',\n        DROPDOWN: '.dropdown',\n        DROPDOWN_ITEMS: '.dropdown-item',\n        DROPDOWN_TOGGLE: '.dropdown-toggle'\n    };\n    const OffsetMethod = {\n        OFFSET: 'offset',\n        POSITION: 'position'\n    };\n    class ScrollSpy {\n        constructor(element, config) {\n            this._element = element;\n            this._scrollElement = element.tagName === 'BODY' ? window : element;\n            this._config = this._getConfig(config);\n            this._selector = `${ this._config.target } ${ Selector.NAV_LINKS },` + `${ this._config.target } ${ Selector.LIST_ITEMS },` + `${ this._config.target } ${ Selector.DROPDOWN_ITEMS }`;\n            this._offsets = [];\n            this._targets = [];\n            this._activeTarget = null;\n            this._scrollHeight = 0;\n            $(this._scrollElement).on(Event.SCROLL, event => this._process(event));\n            this.refresh();\n            this._process();\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        refresh() {\n            const autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;\n            const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n            const offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;\n            this._offsets = [];\n            this._targets = [];\n            this._scrollHeight = this._getScrollHeight();\n            const targets = [].slice.call(document.querySelectorAll(this._selector));\n            targets.map(element => {\n                let target;\n                const targetSelector = Util.getSelectorFromElement(element);\n                if (targetSelector) {\n                    target = document.querySelector(targetSelector);\n                }\n                if (target) {\n                    const targetBCR = target.getBoundingClientRect();\n                    if (targetBCR.width || targetBCR.height) {\n                        return [\n                            $(target)[offsetMethod]().top + offsetBase,\n                            targetSelector\n                        ];\n                    }\n                }\n                return null;\n            }).filter(item => item).sort((a, b) => a[0] - b[0]).forEach(item => {\n                this._offsets.push(item[0]);\n                this._targets.push(item[1]);\n            });\n        }\n        dispose() {\n            $.removeData(this._element, DATA_KEY);\n            $(this._scrollElement).off(EVENT_KEY);\n            this._element = null;\n            this._scrollElement = null;\n            this._config = null;\n            this._selector = null;\n            this._offsets = null;\n            this._targets = null;\n            this._activeTarget = null;\n            this._scrollHeight = null;\n        }\n        _getConfig(config) {\n            //config = {\n            //    ...Default,\n            //    ...typeof config === 'object' && config ? config : {}\n            //};\n            config = langx.mixin({},Default,typeof config === 'object' && config ? config : {});\n            if (typeof config.target !== 'string') {\n                let id = $(config.target).attr('id');\n                if (!id) {\n                    id = Util.getUID(NAME);\n                    $(config.target).attr('id', id);\n                }\n                config.target = `#${ id }`;\n            }\n            Util.typeCheckConfig(NAME, config, DefaultType);\n            return config;\n        }\n        _getScrollTop() {\n            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n        }\n        _getScrollHeight() {\n            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n        }\n        _getOffsetHeight() {\n            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n        }\n        _process() {\n            const scrollTop = this._getScrollTop() + this._config.offset;\n            const scrollHeight = this._getScrollHeight();\n            const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n            if (this._scrollHeight !== scrollHeight) {\n                this.refresh();\n            }\n            if (scrollTop >= maxScroll) {\n                const target = this._targets[this._targets.length - 1];\n                if (this._activeTarget !== target) {\n                    this._activate(target);\n                }\n                return;\n            }\n            if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n                this._activeTarget = null;\n                this._clear();\n                return;\n            }\n            const offsetLength = this._offsets.length;\n            for (let i = offsetLength; i--;) {\n                const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n                if (isActiveTarget) {\n                    this._activate(this._targets[i]);\n                }\n            }\n        }\n        _activate(target) {\n            this._activeTarget = target;\n            this._clear();\n            const queries = this._selector.split(',').map(selector => `${ selector }[data-target=\"${ target }\"],${ selector }[href=\"${ target }\"]`);\n            const $link = $([].slice.call(document.querySelectorAll(queries.join(','))));\n            if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {\n                $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);\n                $link.addClass(ClassName.ACTIVE);\n            } else {\n                $link.addClass(ClassName.ACTIVE);\n                $link.parents(Selector.NAV_LIST_GROUP).prev(`${ Selector.NAV_LINKS }, ${ Selector.LIST_ITEMS }`).addClass(ClassName.ACTIVE);\n                $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);\n            }\n            $(this._scrollElement).trigger(Event.ACTIVATE, { relatedTarget: target });\n        }\n        _clear() {\n            [].slice.call(document.querySelectorAll(this._selector)).filter(node => node.classList.contains(ClassName.ACTIVE)).forEach(node => node.classList.remove(ClassName.ACTIVE));\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                const _config = typeof config === 'object' && config;\n                if (!data) {\n                    data = new ScrollSpy(this, _config);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    $(window).on(Event.LOAD_DATA_API, () => {\n        const scrollSpys = [].slice.call(document.querySelectorAll(Selector.DATA_SPY));\n        const scrollSpysLength = scrollSpys.length;\n        for (let i = scrollSpysLength; i--;) {\n            const $spy = $(scrollSpys[i]);\n            ScrollSpy._jqueryInterface.call($spy, $spy.data());\n        }\n    });\n    $.fn[NAME] = ScrollSpy._jqueryInterface;\n    $.fn[NAME].Constructor = ScrollSpy;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return ScrollSpy._jqueryInterface;\n    };\n    return ScrollSpy;\n});"]}
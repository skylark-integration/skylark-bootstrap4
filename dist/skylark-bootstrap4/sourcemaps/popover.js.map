{"version":3,"sources":["popover.js"],"names":["define","langx","$","plugins","bs4","Tooltip","NAME","VERSION","DATA_KEY","EVENT_KEY","jquery_NO_CONFLICT","fn","CLASS_PREFIX","BSCLS_PREFIX_REGEX","RegExp","Default","mixin","placement","trigger","content","template","DefaultType","ClassName","FADE","SHOW","Selector","TITLE","CONTENT","Event","HIDE","HIDDEN","SHOWN","INSERTED","CLICK","FOCUSIN","FOCUSOUT","MOUSEENTER","MOUSELEAVE","Popover","[object Object]","this","getTitle","_getContent","attachment","getTipElement","addClass","tip","config","$tip","setElementContent","find","call","element","removeClass","getAttribute","tabClass","attr","match","length","join","each","data","_config","test","TypeError","_jqueryInterface","Constructor","noConflict"],"mappings":";;;;;;;AAAAA,QACI,0BACA,0BACA,4BACA,QACA,aACD,SAAUC,EAAMC,EAAGC,EAAQC,EAAIC,GAE9B,aACA,MAAMC,EAAO,UACPC,EAAU,QACVC,EAAW,aACXC,MAAiBD,IACjBE,EAAqBR,EAAES,GAAGL,GAC1BM,EAAe,aACfC,EAAqB,IAAIC,iBAAkBF,QAAqB,KAYhEG,EAAUd,EAAMe,SAElBX,EAAQU,SAEJE,UAAW,QACXC,QAAS,QACTC,QAAS,GACTC,SAAU,wIAGZC,EAAcpB,EAAMe,SAEtBX,EAAQgB,aAEJF,QAAS,8BAGXG,GACFC,KAAM,OACNC,KAAM,QAEJC,GACFC,MAAO,kBACPC,QAAS,iBAEPC,GACFC,YAAcpB,IACdqB,gBAAkBrB,IAClBe,YAAcf,IACdsB,cAAgBtB,IAChBuB,oBAAsBvB,IACtBwB,cAAgBxB,IAChByB,kBAAoBzB,IACpB0B,oBAAsB1B,IACtB2B,wBAA0B3B,IAC1B4B,wBAA0B5B,WAExB6B,UAAgBjC,EAClBE,qBACI,OAAOA,EAEXQ,qBACI,OAAOA,EAEXT,kBACI,OAAOA,EAEXE,sBACI,OAAOA,EAEXoB,mBACI,OAAOA,EAEXnB,uBACI,OAAOA,EAEXY,yBACI,OAAOA,EAEXkB,gBACI,OAAOC,KAAKC,YAAcD,KAAKE,cAEnCH,mBAAmBI,GACfzC,EAAEsC,KAAKI,iBAAiBC,YAAajC,KAAkB+B,KAE3DJ,gBAEI,OADAC,KAAKM,IAAMN,KAAKM,KAAO5C,EAAEsC,KAAKO,OAAO3B,UAAU,GACxCoB,KAAKM,IAEhBP,aACI,MAAMS,EAAO9C,EAAEsC,KAAKI,iBACpBJ,KAAKS,kBAAkBD,EAAKE,KAAKzB,EAASC,OAAQc,KAAKC,YACvD,IAAItB,EAAUqB,KAAKE,cACI,mBAAZvB,IACPA,EAAUA,EAAQgC,KAAKX,KAAKY,UAEhCZ,KAAKS,kBAAkBD,EAAKE,KAAKzB,EAASE,SAAUR,GACpD6B,EAAKK,eAAgB/B,EAAUC,QAAUD,EAAUE,QAEvDe,cACI,OAAOC,KAAKY,QAAQE,aAAa,iBAAmBd,KAAKO,OAAO5B,QAEpEoB,iBACI,MAAMS,EAAO9C,EAAEsC,KAAKI,iBACdW,EAAWP,EAAKQ,KAAK,SAASC,MAAM5C,GACzB,OAAb0C,GAAqBA,EAASG,OAAS,GACvCV,EAAKK,YAAYE,EAASI,KAAK,KAGvCpB,wBAAwBQ,GACpB,OAAOP,KAAKoB,KAAK,WACb,IAAIC,EAAO3D,EAAEsC,MAAMqB,KAAKrD,GACxB,MAAMsD,EAA4B,iBAAXf,EAAsBA,EAAS,KACtD,IAAKc,IAAQ,eAAeE,KAAKhB,MAG5Bc,IACDA,EAAO,IAAIvB,EAAQE,KAAMsB,GACzB5D,EAAEsC,MAAMqB,KAAKrD,EAAUqD,IAEL,iBAAXd,GAAqB,CAC5B,QAA4B,IAAjBc,EAAKd,GACZ,MAAM,IAAIiB,8BAA+BjB,MAE7Cc,EAAKd,SAWrB,OANA7C,EAAES,GAAGL,GAAQgC,EAAQ2B,iBACrB/D,EAAES,GAAGL,GAAM4D,YAAc5B,EACzBpC,EAAES,GAAGL,GAAM6D,WAAa,MACpBjE,EAAES,GAAGL,GAAQI,EACN4B,EAAQ2B,mBAEZ3B","file":"../popover.js","sourcesContent":["define([\n    'skylark-utils-dom/langx',\n    'skylark-utils-dom/query',\n    'skylark-utils-dom/plugins',\n    \"./bs4\",\n    './tooltip'\n], function (langx,$, plugins,bs4,Tooltip) {\n    \n    'use strict';\n    const NAME = 'popover';\n    const VERSION = '4.1.3';\n    const DATA_KEY = 'bs.popover';\n    const EVENT_KEY = `.${ DATA_KEY }`;\n    const jquery_NO_CONFLICT = $.fn[NAME];\n    const CLASS_PREFIX = 'bs-popover';\n    const BSCLS_PREFIX_REGEX = new RegExp(`(^|\\\\s)${ CLASS_PREFIX }\\\\S+`, 'g');\n    //const Default = {\n    //    ...Tooltip.Default,\n    //    placement: 'right',\n    //    trigger: 'click',\n    //    content: '',\n    //    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n    //};\n    //const DefaultType = {\n    //    ...Tooltip.DefaultType,\n    //    content: '(string|element|function)'\n    //};\n    const Default = langx.mixin(\n        {},\n        Tooltip.Default,\n        {\n            placement: 'right',\n            trigger: 'click',\n            content: '',\n            template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n        }\n    );\n    const DefaultType = langx.mixin(\n        {},  \n        Tooltip.DefaultType,\n        {\n            content: '(string|element|function)'\n        }\n    );\n    const ClassName = {\n        FADE: 'fade',\n        SHOW: 'show'\n    };\n    const Selector = {\n        TITLE: '.popover-header',\n        CONTENT: '.popover-body'\n    };\n    const Event = {\n        HIDE: `hide${ EVENT_KEY }`,\n        HIDDEN: `hidden${ EVENT_KEY }`,\n        SHOW: `show${ EVENT_KEY }`,\n        SHOWN: `shown${ EVENT_KEY }`,\n        INSERTED: `inserted${ EVENT_KEY }`,\n        CLICK: `click${ EVENT_KEY }`,\n        FOCUSIN: `focusin${ EVENT_KEY }`,\n        FOCUSOUT: `focusout${ EVENT_KEY }`,\n        MOUSEENTER: `mouseenter${ EVENT_KEY }`,\n        MOUSELEAVE: `mouseleave${ EVENT_KEY }`\n    };\n    class Popover extends Tooltip {\n        static get VERSION() {\n            return VERSION;\n        }\n        static get Default() {\n            return Default;\n        }\n        static get NAME() {\n            return NAME;\n        }\n        static get DATA_KEY() {\n            return DATA_KEY;\n        }\n        static get Event() {\n            return Event;\n        }\n        static get EVENT_KEY() {\n            return EVENT_KEY;\n        }\n        static get DefaultType() {\n            return DefaultType;\n        }\n        isWithContent() {\n            return this.getTitle() || this._getContent();\n        }\n        addAttachmentClass(attachment) {\n            $(this.getTipElement()).addClass(`${ CLASS_PREFIX }-${ attachment }`);\n        }\n        getTipElement() {\n            this.tip = this.tip || $(this.config.template)[0];\n            return this.tip;\n        }\n        setContent() {\n            const $tip = $(this.getTipElement());\n            this.setElementContent($tip.find(Selector.TITLE), this.getTitle());\n            let content = this._getContent();\n            if (typeof content === 'function') {\n                content = content.call(this.element);\n            }\n            this.setElementContent($tip.find(Selector.CONTENT), content);\n            $tip.removeClass(`${ ClassName.FADE } ${ ClassName.SHOW }`);\n        }\n        _getContent() {\n            return this.element.getAttribute('data-content') || this.config.content;\n        }\n        _cleanTipClass() {\n            const $tip = $(this.getTipElement());\n            const tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\n            if (tabClass !== null && tabClass.length > 0) {\n                $tip.removeClass(tabClass.join(''));\n            }\n        }\n        static _jqueryInterface(config) {\n            return this.each(function () {\n                let data = $(this).data(DATA_KEY);\n                const _config = typeof config === 'object' ? config : null;\n                if (!data && /dispose|hide/.test(config)) {\n                    return;\n                }\n                if (!data) {\n                    data = new Popover(this, _config);\n                    $(this).data(DATA_KEY, data);\n                }\n                if (typeof config === 'string') {\n                    if (typeof data[config] === 'undefined') {\n                        throw new TypeError(`No method named \"${ config }\"`);\n                    }\n                    data[config]();\n                }\n            });\n        }\n    }\n    $.fn[NAME] = Popover._jqueryInterface;\n    $.fn[NAME].Constructor = Popover;\n    $.fn[NAME].noConflict = () => {\n        $.fn[NAME] = jquery_NO_CONFLICT;\n        return Popover._jqueryInterface;\n    };\n    return Popover;\n});"]}